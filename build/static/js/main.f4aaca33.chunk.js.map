{"version":3,"sources":["queries/FacultyQueries.js","Components/Faculty/getQueries.js","Components/Student_/getQueries.js","queries/AdminQueries.js","Components/Faculty/Faculty.js","queries/StudentQueries.js","Components/DynamicForms.jsx","Components/FormTemplate.jsx","Components/NavBar.jsx","Components/Login.jsx","Components/Post_Request_Template.js","Components/AllForms.jsx","Components/Admin/Home.jsx","Components/Admin/QueryHandler.jsx","Components/Display.jsx","Components/Faculty/QueryHandler.jsx","Components/Faculty/Home.jsx","Components/ResearchStaff/QueryHandler.jsx","Components/Student_/QueryHandler.jsx","Components/Student_/Home.jsx","App.js","Components/Main_Page_Placeholder.jsx","index.js","Components/Admin/getQueries.js"],"names":["module","exports","courseSearch","degreeAuditPt1","degreeAuditPt2","assignedCourseList","facultyLoginInfo","recordAttendance","studentHistory","transcript","updateGrade","updatePassword","viewAdvisees","viewHolds","viewRegistration","viewStudentSchedule","queries","require","permissibleQueries","facultyAssignedCourseList","viewStudentAdvisees","dropCourse","registerForCourse","viewAdvisor","viewStudentLoginInfo","adminLoginInfo","createCourse","createUser","deleteCourse","facultyCourseList","masterScheduleAdd","masterScheduleRemove","modifyCourse","modifyUser","studentLoginInfo","timeSlotDisplay","viewAllUsers","viewCourseHistory","viewFacultyAdvisors","Faculty","getStudentHistory","getStudentHolds","getListOfStudentsFacultyIsAdvising","DynamicForms","props","makeFields","fields","eles","colString","length","toString","map","ele","index","push","id","onChange","e","target","value","console","log","placeholder","state","className","this","Component","FormTemplate","process","array","temp","make","i","type","tempData","updateParams","clear","ReactDOM","render","document","getElementById","style","justifyContent","marginBottom","display","position","bottom","onClick","preventDefault","relevantQuery","NavBar","makeForm","query","arr","doHandleUpdateParams","wrapper","func","val","key","setState","chosenUserTypeNavEleArray","curEle","reqBodyObj","userID","Instructor","crn","courseID","courseName","numCredits","deptID","userType","firstName","lastName","phoneNum","DOB","street","studentID","email","city","zip","Admin","name","dropStudentCourse","registerStudentForCourse","getTranscript","degreeAudit","viewStudentHolds","viewStudentTranscript","Student","element","class","href","role","Login","credentials","user","pass","auth","populateFields","userEmail","update","bind","for","defaultValue","onLoginSubmit","AllForms","clearFields","which","reset","showFields","button","hideFields","passQueryParams","QueryHandler","makeSomeTables","domTarget","data","unique","thList","counter","result","keys","Object","tdList","includes","ele_","generateAndDisplayTableFromObject","res","domDestinationID","doHandleGetTranscript","newObj","generateObjectWithNeededPropertiesOnly","parseInt","Axios","post","then","response","status","catch","error","doHandleCourseSearch","doHandleCreateCourse","replace","displayNewMsgOnScreen","displayTextMessageOnScreen","msg","doHandleCreateUser","doHandleDeleteCourse","doHandleGetDegreeAudit","doHandleDropCourse","doHandleGetFacultyCourseList","doHandleModifyCourse","doHandleModifyUser","doHandleRegisterForCourse","componentDidMount","userCredentials","displayLoginHeader","obj","password","textDecoration","doHandleGetStudentHistory","doHandleGetAdminLoginInfo","doHandleLogin","reqBody","doHandleUpdatePassword","doHandleViewAllUsers","curQuery","doHandleViewStudentHistory","doHandleViewFacultyAdvisors","doHandleViewStudentAdvisees","doHandleViewHolds","doHandleViewRegistration","doHandleViewStudentSchedule","neededPropsArr","doHandleTestLogin","getQueryParams","paramObj","makeForms","formData","testLogin","viewStudentHistory","destinationDomObj","doHandleGetFacultyAssignedCourseList","doHandleGetFacultyLoginInfo","doHandleRecordAttendance","facultyID","doHandleViewAdvisor","doHandleGetViewStudentLoginInfo","App","handleLogin","displayMsg","args","username","validated","displays","forms","Fragment","getDegreeAuditCoursesTakenP1","degreeAudit2","getDegreeAuditCoursesTakenP2","facultyCoursesTeaching"],"mappings":"qHAAAA,EAAOC,QAAU,CASfC,aACE,0/DAuBFC,eACE,2WAMFC,eACE,oYAQFC,mBACE,snDAoBFC,iBACE,6JAMFC,iBACE,uFAIFC,eACE,66BAYFC,WACE,icAcAC,YACA,mEAKFC,eAAgB,sDAIhBC,aACE,wdASFC,UACE,qiBASFC,iBACE,uxDAoBFC,oBACE,26D,0CClKJ,IAAMC,EAAUC,EAAQ,KAElBC,EAAqB,CACzBhB,aAAcc,EAAQd,aACtBC,eAAgBa,EAAQb,eACxBC,eAAgBY,EAAQZ,eACxBC,mBAAoBW,EAAQG,0BAC5Bb,iBAAkBU,EAAQV,iBAC1BC,iBAAkBS,EAAQT,iBAC1BC,eAAgBQ,EAAQR,eACxBC,WAAYO,EAAQP,WACpBE,eAAgBK,EAAQL,eACxBE,UAAWG,EAAQH,UACnBC,iBAAkBE,EAAQF,iBAC1BM,oBAAqBJ,EAAQI,oBAC7BL,oBAAqBC,EAAQD,qBAG/Bf,EAAOC,QAAUiB,G,+EClBjB,IAAMF,EAAUC,EAAQ,KAElBC,EAAqB,CACzBhB,aAAcc,EAAQd,aACtBC,eAAgBa,EAAQb,eACxBC,eAAgBY,EAAQZ,eACxBiB,WAAYL,EAAQK,WACpBC,kBAAmBN,EAAQM,kBAC3Bd,eAAgBQ,EAAQR,eACxBC,WAAYO,EAAQP,WACpBE,eAAgBK,EAAQL,eACxBY,YAAaP,EAAQO,YACrBV,UAAWG,EAAQH,UACnBC,iBAAkBE,EAAQF,iBAC1BU,qBAAsBR,EAAQQ,sBAGhCxB,EAAOC,QAAUiB,G,8JCjBjBlB,EAAOC,QAAU,CAIfwB,eACE,2JAWFvB,aACE,0/DAwBFwB,aACE,2FAMFC,WACE,iKAKFxB,eACE,8WAOFC,eACE,sYAMFwB,aAGE,yCAKFP,WAAY,0DAEZQ,kBACE,6mDAiBAC,kBACA,8HAEAC,qBACA,qCAMFC,aACE,mGAQFC,WACE,uIAOFX,kBACE,kGAKFd,eACE,+6BAYF0B,iBACE,iJAGFC,gBACA,mdASA1B,WACE,mcAgBFE,eAAgB,oDAGhByB,aACE,iLAIFC,kBACE,sjDAiBFC,oBACE,+XAOFzB,UACE,uiBAUFC,iBACE,iyDAmBFM,oBACE,qcAQFL,oBACE,26D,oBCzPJ,IAAMC,EAAUC,EAAQ,KA0BxBjB,EAAOC,QAAQsC,QAxBf,WACE,IAAIrB,EAAqB,GAIvBsB,EAGExB,EAHFwB,kBACAC,EAEEzB,EAFFyB,gBACAC,EACE1B,EADF0B,mCAcF,OAPAxB,EAAmBsB,kBAAoBA,EACvCtB,EAAmBuB,gBAAkBA,EACrCvB,EAAmBwB,mCACjBA,EAIKxB,EAGgBqB,I,kBC1BzBvC,EAAOC,QAAU,CAUbC,aACA,0/DAuBAC,eACA,8WAOAC,eACA,sYAUAiB,WACA,0DAMAC,kBACA,kGAIAd,eACA,+6BAYAC,WACA,mcAiBAE,eACA,sDAIAY,YACA,qXAOAV,UACA,+jBASAC,iBACA,yxDAqBAU,qBACA,+J,6IC3FWmB,E,kDA/Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,WAAa,SAACC,GACZ,IAAIC,EAAO,GAGPC,GAFM,GAAKF,EAAOG,QAEFC,WA0BpB,OAzBAF,EAAY,cAAgBA,EAC5BF,EAAOK,KAAI,SAACC,EAAKC,GACXP,EAAOG,OAAS,GAAK,EACvBF,EAAKO,KACH,uBACEC,GAAIT,EAAOO,GACXG,SAAU,SAACC,GACTX,EAAOO,GAASI,EAAEC,OAAOC,MACzBC,QAAQC,IAAIf,EAAOO,KAErBS,YAAahB,EAAOO,OAKlBP,EAAOO,GAKEP,EAAOO,OAKnBN,GAjCP,EAAKgB,MAAQ,CAAEjB,OAAQ,IAFN,E,0CAsCnB,WACE,OACE,qBAAKkB,UAAU,kBAAkBT,GAAG,qBAAqB,aAAW,MAApE,SACE,+BAAOU,KAAKpB,WAAWoB,KAAKrB,MAAME,gB,GA1CfoB,aCkHZC,E,kDAjHb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAIRwB,QAAU,SAACC,GACT,IAAIC,EAAO,GAYX,OAXAD,EAAMlB,KAAI,SAACC,GAMTkB,EAAKhB,KAAKF,GACVQ,QAAQC,IAAI,oBAIPS,GAlBU,EAqBnBC,KAAO,SAACF,GAEN,IADA,IAAItB,EAAO,GADK,WAEPyB,GACPZ,QAAQC,IAAI,kBACZd,EAAKO,KACH,qBAAKU,UAAU,QAAf,SACE,uBACET,GAAIc,EAAMG,GACVC,KAAK,OACLT,UAAU,eACVF,YAAaO,EAAMG,GACnBhB,SAAU,SAACC,GACT,EAAKb,MAAM8B,SAASL,EAAMG,IAAMf,EAAEC,OAAOC,MACzC,EAAKf,MAAM+B,aAAaN,EAAMG,GAAIf,EAAEC,OAAOC,OAG3CC,QAAQC,IAAI,EAAKjB,MAAM8B,SAASL,EAAMG,YAdvCA,EAAI,EAAGA,EAAIH,EAAMpB,OAAQuB,IAAM,EAA/BA,GAqBT,OADAZ,QAAQC,IAAI,oCACLd,GA5CU,EA+CnB6B,MAAQ,WACNC,IAASC,OAAO,wBAAaC,SAASC,eAAe,UACrDH,IAASC,OAAO,wBAAaC,SAASC,eAAe,UACrDH,IAASC,OAAO,wBAAaC,SAASC,eAAe,WAhDrD,EAAKjB,MAAQ,CAAEJ,MAAO,IAFL,E,0CAoDnB,WAAU,IAAD,OAGHW,EAAOL,KAAKG,QAAQH,KAAKrB,MAAME,QAC/BC,EAAOkB,KAAKM,KAAKD,GACrB,OACE,qBACEN,UAAU,kBACVT,GAAG,qBACH,aAAW,MACX0B,MAAO,CAAEC,eAAgB,UAJ3B,SAME,sBAAM3B,GAAG,QAAT,SACE,sBAAKS,UAAU,MAAf,UACGjB,EAAM,IACP,sBAAKiB,UAAU,QAAf,UACE,wBACES,KAAK,SAELQ,MAAO,CACLE,aAAc,MACdC,QAAS,eACTC,SAAU,WACVC,OAAQ,OAEVtB,UAAU,uBACVuB,QAAS,SAAC9B,GACRA,EAAE+B,iBAEF,EAAK5C,MAAM+B,eACX,EAAK/B,MAAM6C,iBAdf,oBAoBA,wBAEER,MAAO,CACLE,aAAc,MACdC,QAAS,eACTC,SAAU,WACVC,OAAQ,OAEVtB,UAAU,yBACVuB,QAAS,SAAC9B,GACRA,EAAE+B,iBACF,EAAKZ,SAXT,iC,GAzFaV,aCufZwB,E,kDAnfb,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IAyYR+C,SAAW,SAAC7C,EAAQ8C,GAClB,IAAIC,EACJ/C,EAAOK,KAAI,SAACC,GACVQ,QAAQC,IAAIT,MAGdyC,EAAM/C,EACN,IAAIM,EACF,qBAAKY,UAAU,OAAOiB,MAAO,CAAEC,eAAgB,UAA/C,SACE,cAAC,EAAD,CACEpC,OAAQ+C,EACRnB,SAAU,EAAKX,MAAMW,SACrBC,aAAc,EAAKmB,qBACnBL,cAAeG,MAKrBf,IAASC,OAAO1B,EAAK2B,SAASC,eAAe,WA5Z5B,EA+ZnBe,QAAU,SAACC,EAAMC,GACfpB,IAASC,OACP,8BACE,cAAC,EAAD,CAAchC,OAAQ,CAAC,cAEzBiC,SAASC,eAAe,UApaT,EAwanBc,qBAAuB,SAACI,EAAKvC,GAC3BC,QAAQC,IAAIqC,GACZ,EAAKC,SAAL,aAAgBD,OAAhB,MAA0BvC,IAC1BC,QAAQC,IAAI,0CAA2CqC,GACvDtC,QAAQC,IACN,aACAqC,EACA,gCACAvC,EACA,IACA,oDAGF,EAAKf,MAAM+B,aAAauB,EAAKvC,IAlb7B,EAAKI,MAAQ,CACXqC,0BAA2B,GAC3BC,OAAQ,GAERC,WAAY,GACZ5B,SAAU,CAER6B,OAAQ,GACRC,WAAY,GACZC,IAAK,GACLC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRC,UAAW,GACXC,MAAO,GACPC,KAAM,GACNvD,MAAO,GACPwD,IAAK,IAEPhB,OAAQ,MAERiB,MAAO,CACL,CACEC,KAAM,OACNlC,QAAS,kBACP3B,QAAQC,IAAI,0DAmBhB,CACE4D,KAAM,gBACNlC,QAAS,WACP,EAAKI,SACH,CAAC,WAAY,aAAc,aAAc,UACzC,EAAK/C,MAAMlB,gBAKjB,CACE+F,KAAM,gBACNlC,QAAS,WACP,EAAKI,SAEH,CAAC,MAAO,WAAY,aAAc,cAClC,EAAK/C,MAAM1C,gBAIjB,CACEuH,KAAM,cACNlC,QAAS,kBACP,EAAKI,SACH,CACE,SACA,WACA,YACA,WACA,cACA,MACA,SACA,OACA,QACA,OAEF,EAAK/C,MAAMjB,cAGjB,CACE8F,KAAM,gBACNlC,QAAS,kBAAM,EAAKI,SAAS,CAAC,YAAa,EAAK/C,MAAMhB,gBAGxD,CACE6F,KAAM,cACNlC,QAAS,WACP,EAAKI,SAAS,CAAC,YAAa,OAAQ,EAAK/C,MAAM8E,qBAInD,CACED,KAAM,gBACNlC,QAAS,kBACP,EAAKI,SACH,CAAC,WAAY,aAAc,aAAc,UACzC,EAAK/C,MAAMZ,gBAIjB,CACEyF,KAAM,cACNlC,QAAS,kBACP,EAAKI,SACH,CACE,YACA,WACA,cACA,MACA,SACA,OACA,QACA,MACA,UAEF,EAAK/C,MAAMX,cAIjB,CACEwF,KAAM,8BACNlC,QAAS,kBACP,EAAKI,SACH,CAAC,YAAa,OACd,EAAK/C,MAAM+E,4BAIjB,CACEF,KAAM,iBACNlC,QAAS,kBAAM,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMgF,iBAGzD,CACEH,KAAM,kBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,WAAY,UAAW,EAAK/C,MAAMjC,kBAGrD,CAAE8G,KAAM,iBAAkBlC,QAAS,kBAAM,EAAK3C,MAAMR,iBAGpD,CACEqF,KAAM,wBACNlC,QAAS,kBAAM,EAAK3C,MAAMxB,wBAG5B,CACEqG,KAAM,wBACNlC,QAAS,kBAAM,EAAK3C,MAAMN,wBAU5B,CACEmF,KAAM,8BACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMpC,kBAE5C,CACEiH,KAAM,4BACNlC,QAAS,WACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMiF,eAI5C,CACEJ,KAAM,qBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMkF,oBAG5C,CACEL,KAAM,4BACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAM9B,oBAG5C,CACE2G,KAAM,wBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAM7B,uBAG5C,CACE0G,KAAM,0BACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMmF,0BAS9CC,QAAS,CACP,CACEP,KAAM,OACNlC,QAAS,KAGX,CACEkC,KAAM,qBACNlC,QAAS,cAKX,CACEkC,KAAM,gBACNlC,QAAS,kBAAM,EAAKI,SAAS,CAAC,YAAa,EAAK/C,MAAM1C,gBAGxD,CACEuH,KAAM,cACNlC,QAAS,WAEP,EAAKI,SAAS,CAAC,YAAa,OAAQ,EAAK/C,MAAMvB,cAInD,CACEoG,KAAM,eACNlC,QAAS,cAKX,CACEkC,KAAM,sBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,YAAa,OAAQ,EAAK/C,MAAMtB,qBAGnD,CACEmG,KAAM,kBACNlC,QAAS,kBAAM,EAAK3C,MAAMpC,mBAG5B,CACEiH,KAAM,qBACNlC,QAAS,kBAAM,EAAK3C,MAAMV,qBAG5B,CACEuF,KAAM,wBACNlC,QAAS,kBAAM,EAAK3C,MAAMnC,eAG5B,CACEgH,KAAM,kBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,WAAY,UAAW,EAAK/C,MAAMjC,kBAGrD,CACE8G,KAAM,eACNlC,QAAS,kBAAM,EAAK3C,MAAMrB,gBAG5B,CACEkG,KAAM,aACNlC,QAAS,kBAAM,EAAK3C,MAAM/B,cAE5B,CACE4G,KAAM,oBACNlC,QAAS,kBAAM,EAAK3C,MAAM9B,qBAG5B,CACE2G,KAAM,SACNlC,QAAS,MAIbhD,QAAS,CACP,CACEkF,KAAM,OACNlC,QAAS,KAGX,CACEkC,KAAM,uBACNlC,QAAS,WACP,EAAK3C,MAAMvC,uBAIf,CACEoH,KAAM,gBACNlC,QAAS,WACP,EAAKI,SAEH,CAAC,MAAO,WAAY,aAAc,cAClC,EAAK/C,MAAM1C,gBAKjB,CACEuH,KAAM,eACNlC,QAAS,kBAAM,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMiF,eAGzD,CACEJ,KAAM,qBACNlC,QAAS,kBAAM,EAAK3C,MAAMtC,qBAG5B,CACEmH,KAAM,oBACNlC,QAAS,kBACP,EAAKI,SACH,CAAC,YAAa,MAAO,YAAa,QAClC,EAAK/C,MAAMrC,oBAIjB,CACEkH,KAAM,kBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMpC,kBAG5C,CACEiH,KAAM,wBACNlC,QAAS,kBAAM,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAMnC,cAGzD,CACEgH,KAAM,kBACNlC,QAAS,kBAAM,EAAKI,SAAS,CAAC,YAAa,EAAK/C,MAAMjC,kBAExD,CACE8G,KAAM,gBACNlC,QAAS,kBAAM,EAAK3C,MAAMxB,wBAE5B,CACEqG,KAAM,aACNlC,QAAS,kBAAM,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAM/B,aAGzD,CACE4G,KAAM,oBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAM9B,oBAG5C,CACE2G,KAAM,wBACNlC,QAAS,kBACP,EAAKI,SAAS,CAAC,aAAc,EAAK/C,MAAM7B,uBAG5C,CACE0G,KAAM,SACNlC,QAAS,cAxXE,E,0CAwbnB,WACE,IAAIM,EAAM,GACV,OAAQ5B,KAAKrB,MAAMkE,UACjB,IAAK,QACHjB,EAAM5B,KAAKF,MAAMyD,MACjB5D,QAAQC,IAAI,iBACZ,MACF,IAAK,UACHgC,EAAM5B,KAAKF,MAAMxB,QACjBqB,QAAQC,IAAI,mBACZ,MAGF,IAAK,UACHgC,EAAM5B,KAAKF,MAAMiE,QACjBpE,QAAQC,IAAI,iBAShB,IAAId,EAAO8C,EAAI1C,KAAI,SAAC8E,GAClB,OACE,8BACE,mBACEC,MAAM,WACN3E,GAAG,UAEH4E,KAAK,gBACLC,KAAK,WACL7C,QAAS0C,EAAQ1C,QANnB,SAQG0C,EAAO,YAMhB,OACE,qBAAKjE,UAAU,UAAf,SACE,qBACEA,UAAU,YACVT,GAAG,MACH6E,KAAK,UACL,mBAAiB,WAJnB,SAME,qBAAKF,MAAM,OAAX,SAAmBnF,Y,GA1eRmB,a,QCoKNmE,E,kDA7Jb,aAAe,IAAD,uBACZ,gBAVFtE,MAAQ,CACNuE,YAAa,CACXC,KAAM,GACNC,KAAM,GACN1B,SAAU,GACV2B,KAAM,KAII,EAMdC,eAAiB,SAACjE,GAChB,IAAIkE,EACAH,EAEJ,OAAQ/D,GACN,IAAK,QACHkE,EAAY,2BACZH,EAAO,eACI/D,EACX,MAEF,IAAK,UACHkE,EAAY,+BACZH,EAAO,OACI/D,EACX,MAEF,IAAK,gBACHkE,EAAY,4BACZH,EAAO,YACI/D,EACX,MAEF,IAAK,UACHkE,EAAY,4BACZH,EAAO,WACI/D,EAKf,IAAI6D,EAAc,CAChBC,KAAMI,EACNH,KAAMA,EACN1B,SAAUrC,GAGZ,EAAK0B,SAAS,CAAEmC,gBAChB1E,QAAQC,IAAI,EAAKE,MAAMuE,cA5CX,EA+CdM,OAAS,aA/CK,EAiDd/F,WAAa,WACX,IAAIC,EAAS,CAAC,SAAU,aACpBC,EAAO,GACXD,EAAOK,KAAI,SAACC,EAAKC,GACfN,EAAKO,KACH,qBAAKU,UAAU,QAAf,SACE,uBACET,GAAIT,EAAOO,GACXG,SAAU,SAACC,GACTX,EAAOO,GAASI,EAAEC,OAAOC,MACzBC,QAAQC,IAAIf,EAAOO,KAErBS,YAAahB,EAAOO,YA3D5B,IAAIqF,EAAiB,EAAKA,eAAeG,KAApB,gBAFT,OAGZ,EAAKH,eAAiBA,EAHV,E,0CAsEd,WAAU,IAAD,OACH,EAA2BzE,KAAKF,MAAMuE,YAApCC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KAAM1B,EAAlB,EAAkBA,SAElB,OACE,sBAAK9C,UAAU,kBAAkBT,GAAG,qBAAqB,aAAW,MAApE,UACE,wBAAQgC,QAAS,kBAAM,EAAKmD,eAAe,UAA3C,iCAGA,wBAAQnD,QAAS,kBAAM,EAAKmD,eAAe,YAA3C,mCAGA,wBAAQnD,QAAS,kBAAM,EAAKmD,eAAe,kBAA3C,0CAIA,wBAAQnD,QAAS,kBAAM,EAAKmD,eAAe,YAA3C,mCAGA,iCACE,sBAAK1E,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,uBACET,GAAG,QACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACT8E,EAAO9E,EAAEC,OAAOC,MAChBC,QAAQC,IAAI0E,QAIjBtE,KAAKpB,aACN,qBAAKmB,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,WACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACT+E,EAAO/E,EAAEC,OAAOC,MAChBC,QAAQC,IAAI,WAAY2E,WAMhC,qBAAKxE,UAAU,MAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,uBAAO8E,IAAI,eACX,yBACEvF,GAAG,aACHC,SAAU,SAACC,GACTqD,EAAWrD,EAAEC,OAAOC,OAEtBK,UAAU,eACV+E,aAAc,mBANhB,UAQE,sDACA,wBAAQpF,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,gBAAd,oCAIN,qBAAKK,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,wBACES,KAAK,SACLT,UAAU,uBACVuB,QAAS,SAAC9B,GACRA,EAAE+B,iBAEF,EAAK5C,MAAMoG,cAAcT,EAAMC,EAAM1B,IANzC,mC,GApJM5C,a,gBCAJjD,EAAQ,I,qBCgpBTgI,GC9oBI/E,Y,kDD4BjB,aAAe,IAAD,uBACZ,gBA/BFH,MAAQ,CACNuE,YAAa,CACXC,KAAM,GACNC,KAAM,GACN1B,SAAU,GACV2B,KAAM,IAER/D,SAAU,CAER6B,OAAQ,GACRG,SAAU,GACVD,IAAK,GACLE,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXP,WAAY,GACZQ,SAAU,GACVC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRC,UAAW,GACXC,MAAO,GACPC,KAAM,GACNvD,MAAO,GACPwD,IAAK,KAIK,EAUdmB,eAAiB,SAACjE,KAVJ,EAWdyE,YAAc,SAACC,GACA,GAATA,GAAYpE,SAASC,eAAe,SAASoE,QACpC,GAATD,GACFpE,SAASC,eAAe,SAASoE,SAdvB,EAiBdC,WAAa,WACX,MAoBI,EAAKtF,MAAMW,SAnBb6B,EADF,EACEA,OACAG,EAFF,EAEEA,SACAC,EAHF,EAGEA,WACAC,EAJF,EAIEA,WACAH,EALF,EAKEA,IACAI,EANF,EAMEA,OAEAC,EARF,EAQEA,SACAC,EATF,EASEA,UACAC,EAVF,EAUEA,SACAC,EAXF,EAWEA,SACAC,EAZF,EAYEA,IACAC,EAbF,EAaEA,OACAC,EAdF,EAcEA,UACAC,EAfF,EAeEA,MACAC,EAhBF,EAgBEA,KACAvD,EAjBF,EAiBEA,MACAwD,EAlBF,EAkBEA,IACAf,EAnBF,EAmBEA,WAGE8C,EACF,sBAAKtF,UAAU,kBAAkBT,GAAG,qBAAqB,aAAW,MAApE,UACE,wBAAQgC,QAAS,EAAKgE,WAAtB,kBACA,uBAAMhG,GAAG,QAAT,UACE,sBAAKS,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,uBACET,GAAG,SACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACT8C,EAAS9C,EAAEC,OAAOC,WAKxB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,YACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,YACZN,SAAU,SAACC,GACT2D,EAAY3D,EAAEC,OAAOC,WAK3B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,QACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,QACZN,SAAU,SAACC,GACT4D,EAAQ5D,EAAEC,OAAOC,WAIvB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTiD,EAAWjD,EAAEC,OAAOC,WAI1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,YACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,YACZN,SAAU,SAACC,GACTsD,EAAYtD,EAAEC,OAAOC,WAI3B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTuD,EAAWvD,EAAEC,OAAOC,WAI1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTwD,EAAWxD,EAAEC,OAAOC,WAK1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACTyD,EAAMzD,EAAEC,OAAOC,WAKrB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,SACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACT0D,EAAS1D,EAAEC,OAAOC,WAKxB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,OACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,OACZN,SAAU,SAACC,GACT6D,EAAO7D,EAAEC,OAAOC,WAKtB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,QACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,QACZN,SAAU,SAACC,GACTM,EAAQN,EAAEC,OAAOC,WAKvB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,MACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,MACZN,SAAU,SAACC,GACT8D,EAAM9D,EAAEC,OAAOC,WAKrB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTiD,EAAWjD,EAAEC,OAAOC,WAK1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,aACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,aACZN,SAAU,SAACC,GACTkD,EAAalD,EAAEC,OAAOC,WAK5B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,aACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,aACZN,SAAU,SAACC,GACTmD,EAAanD,EAAEC,OAAOC,WAI5B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,MACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,MACZN,SAAU,SAACC,GACTgD,EAAMhD,EAAEC,OAAOC,WAKrB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,SACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACToD,EAASpD,EAAEC,OAAOC,WAIxB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,aACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,aACZN,SAAU,SAACC,GACT+C,EAAa/C,EAAEC,OAAOC,cAM9B,qBAAKK,UAAU,MAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,uBAAO8E,IAAI,eACX,yBACEvF,GAAG,aACHC,SAAU,SAACC,GACTqD,EAAWrD,EAAEC,OAAOC,OAEtBK,UAAU,eACV+E,aAAc,mBANhB,UAQE,sDACA,wBAAQpF,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,gBAAd,oCAIN,qBAAKK,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,wBACES,KAAK,SACLT,UAAU,uBACVuB,QAAS,SAAC9B,GACRA,EAAE+B,iBACF,EAAK5C,MAAM4G,gBAAgB,CACzBjD,SACAG,WACAD,MACAK,WACAC,YACAC,WACAC,WACAC,MACAC,SACAC,YACAC,QACAC,OACAvD,QACAwD,MACAZ,aACAC,aAEAC,SACAL,eAGF,EAAK0C,YAAY,IA3BrB,+BAqCVrE,IAASC,OAAOwE,EAAQvE,SAASC,eAAe,UA1TpC,EA6TduE,WAAa,WACX,IAAIF,EAAa,EAAKA,WACtBxE,IAASC,OACP,wBAAQS,QAAS,kBAAM8D,KAAvB,kBACAtE,SAASC,eAAe,UA/T1B,IAAI0D,EAAiB,EAAKA,eAAeG,KAApB,gBACrB,EAAKH,eAAiBA,EACtB,IAAIpE,EAAO,EAAK+E,WAAWR,KAAhB,gBAJC,OAKZ,EAAKQ,WAAa/E,EAClBA,EAAO,EAAKiF,WAAWV,KAAhB,gBACP,EAAKU,WAAajF,EAPN,E,4CAqUd,c,oBACA,WAAU,IAAD,OACH,EAmBAL,KAAKF,MAAMW,SAlBb6B,EADF,EACEA,OACAG,EAFF,EAEEA,SACAD,EAHF,EAGEA,IACAE,EAJF,EAIEA,WACAC,EALF,EAKEA,WACAC,EANF,EAMEA,OACAC,EAPF,EAOEA,SACAC,EARF,EAQEA,UACAC,EATF,EASEA,SACAC,EAVF,EAUEA,SACAC,EAXF,EAWEA,IACAC,EAZF,EAYEA,OACAC,EAbF,EAaEA,UACAC,EAdF,EAcEA,MACAC,EAfF,EAeEA,KACAvD,EAhBF,EAgBEA,MACAwD,EAjBF,EAiBEA,IACAf,EAlBF,EAkBEA,WAKF,OACE,sBAAKxC,UAAU,kBAAkBT,GAAG,qBAAqB,aAAW,MAApE,UACE,wBAAQgC,QAAStB,KAAKsF,WAAtB,kBACA,uBAAMhG,GAAG,QAAT,UACE,sBAAKS,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,uBACET,GAAG,SACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACT8C,EAAS9C,EAAEC,OAAOC,WAKxB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,YACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,YACZN,SAAU,SAACC,GACT2D,EAAY3D,EAAEC,OAAOC,WAK3B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,QACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,QACZN,SAAU,SAACC,GACT4D,EAAQ5D,EAAEC,OAAOC,WAIvB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTiD,EAAWjD,EAAEC,OAAOC,WAI1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,YACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,YACZN,SAAU,SAACC,GACTsD,EAAYtD,EAAEC,OAAOC,WAI3B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTuD,EAAWvD,EAAEC,OAAOC,WAI1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTwD,EAAWxD,EAAEC,OAAOC,WAK1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACTyD,EAAMzD,EAAEC,OAAOC,WAKrB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,SACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACT0D,EAAS1D,EAAEC,OAAOC,WAKxB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,OACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,OACZN,SAAU,SAACC,GACT6D,EAAO7D,EAAEC,OAAOC,WAKtB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,QACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,QACZN,SAAU,SAACC,GACTM,EAAQN,EAAEC,OAAOC,WAKvB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,MACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,MACZN,SAAU,SAACC,GACT8D,EAAM9D,EAAEC,OAAOC,WAIrB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,WACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,WACZN,SAAU,SAACC,GACTiD,EAAWjD,EAAEC,OAAOC,WAK1B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,aACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,aACZN,SAAU,SAACC,GACTkD,EAAalD,EAAEC,OAAOC,WAK5B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,aACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,aACZN,SAAU,SAACC,GACTmD,EAAanD,EAAEC,OAAOC,WAI5B,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,MACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,MACZN,SAAU,SAACC,GACTgD,EAAMhD,EAAEC,OAAOC,WAKrB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,SACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,SACZN,SAAU,SAACC,GACToD,EAASpD,EAAEC,OAAOC,WAIxB,qBAAKK,UAAU,QAAf,SACE,uBACET,GAAG,aACHkB,KAAK,OACLT,UAAU,eACVF,YAAY,aACZN,SAAU,SAACC,GACT+C,EAAa/C,EAAEC,OAAOC,cAM9B,qBAAKK,UAAU,MAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,uBAAO8E,IAAI,eACX,yBACEvF,GAAG,aACHC,SAAU,SAACC,GACTqD,EAAWrD,EAAEC,OAAOC,OAEtBK,UAAU,eACV+E,aAAc,mBANhB,UAQE,sDACA,wBAAQpF,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,gBAAd,oCAIN,qBAAKK,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,wBACES,KAAK,SACLT,UAAU,uBACVuB,QAAS,SAAC9B,GACRA,EAAE+B,iBACF,EAAK0D,YAAY,GAEjB,EAAKtG,MAAM4G,gBAAgB,CACzBjD,SACAE,MACAC,WACAI,WACAC,YACAC,WACAC,WACAC,MACAC,SACAC,YACAC,QACAC,OACAvD,QACAwD,MACAZ,aACAC,aACAC,SACAL,gBAzBN,kC,GAzmBStC,cE+nBRuF,G,wDAnnBb,WAAY7G,GAAQ,IAAD,uBACjB,cAAMA,IAsCR8G,eAAiB,SAAC7D,EAAK8D,GACrB,EAAKxD,SAAS,CAAEyD,KAAM/D,IACtB,IAAIgE,EAAS,GACTC,EAAS,GACTC,EAAU,EACVC,EAASnE,EAAI1C,KAAI,SAAC8E,EAAS5E,GAC7B,IAAI4G,EAAOC,OAAOD,KAAKhC,GACnBkC,EAAS,GAoBb,OAjBAF,EAAK9G,KAAI,SAACC,GACHyG,EAAOO,SAAShH,IACnByG,EAAOvG,KAAKF,MAMhByG,EAAO1G,KAAI,SAACC,EAAKC,GACf8G,EAAO7G,KAAK,6BAAK2E,EAAQ7E,MAErB2G,EAAUF,EAAO5G,SACnB6G,EAAOxG,KAAK,oBAAIC,GAAG,SAAP,SAAiBsG,EAAOxG,MACpC0G,QAIG,oBAAIxG,GAAG,QAAP,SAAgB4G,OAGrBE,EACF,wBAAOrG,UAAU,QAAjB,UACE,uBAAOkE,MAAM,aAAb,SACE,6BAAK4B,MAEP,gCAAQE,OAGZnF,IAASC,OACP,qBAAKd,UAAU,OAAf,SAAuBqG,IACvBtF,SAASC,eAAe2E,IAE1B/F,QAAQC,IAAIgG,IAjFK,EAoFnBS,kCAAoC,SAACC,EAAKC,GACxC,EAAKd,eAAea,EAAKC,GACzB5G,QAAQC,IAAI,8BAA+B2G,IAtF1B,EA2FnBC,sBAAwB,WACtB,EAAK7F,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CAAC,cAC1DD,EAAM,UAAgBE,SAASF,EAAM,WACrCG,IAAMC,KAAK,yCAA0C,CAAEJ,WACpDK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QACX,EAAKX,kCAAkCU,EAASpB,KAAM,YAGzDsB,OAAM,SAAUC,GACXA,GAC2B,KAAzBA,EAAMH,SAASC,QACjBrH,QAAQC,IAAI,+CA1GH,EAuInBuH,qBAAuB,WACrB,EAAKxG,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CACvD,0CAEFE,IAAMC,KAAK,2CAA4C,CAAEJ,WAAUK,MACjE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aA9IzC,EAmJnByB,qBAAuB,WACrB,EAAKzG,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CACvD,WACA,aACA,aACA,WAGFD,EAAM,OAAaA,EAAO7D,OAAOyE,QAAQ,KAEzCT,IAAMC,KAAK,2CAA4C,CAAEJ,WACtDK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QAGX,EAAKM,sBACH,kCAAoCb,EAAM,aAI/CQ,MACC,SAAUC,GACRlH,KAAKsH,sBAAsB,8BACvBJ,GAC2B,KAAzBA,EAAMH,SAASC,QAAerH,QAAQC,IAAI,gBAEhDgF,KALF,kBA3Ka,EAoLnB2C,2BAA6B,SAACC,GAC5B,EAAK7G,QACLhB,QAAQC,IAAI,cACZ,IAAIT,EAAM,6BAAKqI,IACf5G,IAASC,OACP,qBAAKd,UAAU,gCAAf,SAAgDZ,IAChD2B,SAASC,eAAe,WA1LT,EA8LnBuG,sBAAwB,SAACE,GACvB,EAAK7G,QACLhB,QAAQC,IAAI,cACZ,IAAIT,EAAM,6BAAKqI,IACf5G,IAASC,OACP,qBAAKd,UAAU,gCAAf,SAAgDZ,IAChD2B,SAASC,eAAe,YApMT,EAwMnB0G,mBAAqB,WACnB,EAAK9G,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CACvD,SACA,WACA,YACA,WACA,cACA,MACA,SACA,OACA,QACA,QAEFE,IAAMC,KAAK,yCAA0C,CAAEJ,WAAUK,MAC/D,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAxNzC,EA6NnB+B,qBAAuB,WACrB,EAAK/G,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CAAC,aAC1DE,IAAMC,KAAK,2CAA4C,CAAEJ,WACtDK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QAEX,EAAKO,2BACH,kCAAoCd,EAAM,aAI/CQ,MACC,SAAUC,GACRlH,KAAKuH,2BAA2B,oCAC5BL,GAC2B,KAAzBA,EAAMH,SAASC,QACjBrH,QAAQC,IAAI,yCAEhBgF,KANF,kBA5Oa,EAsPnB+C,uBAAyB,WACvB,EAAKhH,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CAAC,cAE1DE,IAAMC,KAAK,6CAA8C,CAAEJ,WAAUK,MACnE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,YAI1DiB,IAAMC,KAAK,6CAA8C,CAAEJ,WAAUK,MACnE,SAACC,GACCpH,QAAQC,IAAI,gBAAiBmH,GACvBA,EAASpB,KAGf,EAAKU,kCAAkCU,EAASpB,KAAM,aAtQzC,EA2QnBhF,MAAQ,WACNC,IAASC,OAAO,wBAAaC,SAASC,eAAe,UACrDH,IAASC,OAAO,wBAAaC,SAASC,eAAe,WA7QpC,EAgRnB6G,mBAAqB,WACnB,EAAKjH,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CACvD,YACA,QAGFE,IAAMC,KAAK,yCAA0C,CAAEJ,WACpDK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QACX,EAAKX,kCAAkCU,EAASpB,KAAM,YAGzDsB,OAAM,SAAUC,GACXA,GAC2B,KAAzBA,EAAMH,SAASC,QACjBrH,QAAQC,IAAI,4CAlSH,EAuSnBiI,6BAA+B,WAC7B,EAAKlH,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,gDAAiD,CAC1DJ,WACCK,MAAK,SAACC,GACP,EAAKV,kCAAkCU,EAAU,aA7SlC,EAiTnBe,qBAAuB,WACrB,EAAKnH,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CACvD,WACA,aACA,aACA,WAEFE,IAAMC,KAAK,2CAA4C,CAAEJ,WAAUK,MACjE,SAACC,GACC,EAAKV,kCAAkCU,EAAU,aA3TpC,EAgUnBgB,mBAAqB,WACnB,EAAKpH,QACL,IACI8F,EAAS,EAAKC,uCAAuC,CACvD,YACA,WACA,cACA,MACA,SACA,OACA,QACA,MACA,WAGF/G,QAAQC,IAAI6G,GAEZG,IAAMC,KAAK,yCAA0C,CAAEJ,WACpDK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,SACXrH,QAAQC,IAAImH,GACZ,EAAKQ,2BACH,iBAAmBd,EAAM,OAAa,SAI3CQ,MACC,SAAUC,KAIRtC,KAJF,kBA7Va,EAqWnBoD,0BAA4B,WAC1B,EAAKrH,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CACvD,YACA,QAEFE,IAAMC,KAAK,gDAAiD,CAC1DJ,WACCK,MAAK,SAACC,GACPpH,QAAQC,IAAImH,GAEZnG,IAASC,OACP,qBAAKd,UAAU,OAAf,SACE,6CACc0G,EAAM,UADpB,eAC+CA,EAAM,IADrD,SAIF3F,SAASC,eAAe,cAtXX,EA2XnBkH,kBAAoB,WAClB,IAAIxB,EAAS,EAAKC,uCAAuC,CAAC,WAE1DD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI6G,GACZG,IAAMC,KAAK,iDAAkD,CAC3DJ,WACCK,MAAK,SAACC,GACPpH,QAAQC,IAAImH,GACZ,MAAsCA,EAASpB,KAAK,GAChDtF,EAAO,CAAEiC,OADb,EAAMA,OACuBQ,UAD7B,EAAcA,UACqCC,SADnD,EAAyBA,UAEzBpD,QAAQC,IAAIS,GACZ,EAAK8H,mBAAmB9H,GACxBO,IAASC,OAAO,wBAAaC,SAASC,eAAe,aAxYtC,EA2YnBoH,mBAAqB,SAACC,GACpB,IAAM9F,EAA2D8F,EAA3D9F,OAAkBQ,GAAyCsF,EAAnDvF,SAAmDuF,EAAzCtF,WAAWC,EAA8BqF,EAA9BrF,SAA8BqF,EAApBhF,MAAoBgF,EAAbC,SAEpD,EAAKd,2BACH,gCACE,oBAAIxH,UAAU,cAAd,sCACA,qBAAIA,UAAU,cAAciB,MAAO,CAAEsH,eAAgB,aAArD,UACG,IACAxF,EAFH,IAEeC,EAFf,IAEyB,2CAAcT,EAAd,aAG3B,UAtZe,EA0ZnBiG,0BAA4B,WAC1B,IAAI9B,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,6CAA8C,CACvDJ,WACCK,MAAK,SAACC,GACPpH,QAAQC,IAAImH,GACZ,EAAKV,kCAAkCU,EAASpB,KAAM,aAhavC,EAoanB6C,0BAA4B,WAC1B,EAAK7H,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CAAC,WAE1DD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBtB,IAAMC,KAAK,6CAA8C,CACvDJ,WACCK,MAAK,SAACC,GACP,EAAKV,kCAAkCU,EAASpB,KAAM,aA5avC,EAgbnB8C,cAAgB,WACd,EAAK9H,QACL,IAAI+H,EAAU,EAAK5I,MAAMuC,WACrBoE,EAAS,GACA,CAAC,WAAY,WAAY,YAC/BvH,KAAI,SAACC,GAERsH,EAAOtH,GADLA,KAAOuJ,EACKA,EAAQvJ,GAER,MAIlByH,IAAMC,KAAK,2CAA4C,CACrDJ,WACCK,MAAK,SAACC,QA/bQ,EAkcnB4B,uBAAyB,WACvB,EAAKhI,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CACvD,WACA,WAGFE,IAAMC,KAAK,6CAA8C,CAAEJ,WAAUK,MACnE,SAACC,GACC,EAAKQ,2BACH,6BAA+Bd,EAAM,OAAa,SA5cvC,EAkdnBmC,qBAAuB,WACrB,EAAKjI,QACL,EAAKkI,SAAW9L,IAAQoB,aAExByI,IAAMC,KAAK,2CAA4C,IAAIC,MACzD,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAxdzC,EA6dnBmD,2BAA6B,WAC3B,EAAKnI,QACL,IAAI8F,EAAS,EAAKC,uCAAuC,CAAC,cAE1DE,IAAMC,KAAK,gDAAiD,CAC1DJ,WACCK,MAAK,SAACC,QAneQ,EAsenBgC,4BAA8B,WAC5B,EAAKpI,QACL,EAAKkI,SAAW9L,IAAQsB,oBACxBuI,IAAMC,KAAK,kDAAmD,IAAIC,MAChE,SAACC,QA1ec,EA8enBiC,4BAA8B,WAC5B,EAAKrI,QACLiG,IAAMC,KAAK,kDAAmD,IAAIC,MAChE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAlfzC,EAufnBsD,kBAAoB,WAClB,IAAIxC,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,wCAAyC,CAAEJ,WAAUK,MAC9D,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aA3fzC,EAggBnBuD,yBAA2B,WACzB,IAAIzC,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aApgBzC,EAygBnBwD,4BAA8B,WAC5B,IAAI1C,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,kDAAmD,CAC5DJ,WACCK,MAAK,SAACC,GACP,EAAKV,kCAAkCU,EAASpB,KAAM,aA9gBvC,EAkhBnBe,uCAAyC,SAAC0C,GACxC,IAAI3C,EAAS,GACTiC,EAAU,EAAK5I,MAAMuC,WAUzB,OATkB+G,EACNlK,KAAI,SAACC,GAEbsH,EAAOtH,GADLA,KAAOuJ,EACKA,EAAQvJ,GAER,MAIXsH,GA9hBU,EAiiBnB4C,kBAAoB,WAClB,IAAI5C,EAAS,EAAKC,uCAAuC,CAAC,WAE1DE,IAAMC,KAAK,wCAAyC,CAAEJ,WAAUK,MAC9D,SAACC,QAriBc,EAyiBnBuC,eAAiB,SAACC,GAChB,IAAI9C,EAAS8C,EACb5J,QAAQC,IAAI,2BAA6B2J,GACzC,EAAKrH,SAAS,CAAEzB,SAAUgG,IAC1B9G,QAAQC,IAAI,EAAKE,MAAMW,UACvBd,QAAQC,IAAI,uBA9iBK,EAijBnBc,aAAe,SAACuB,EAAKvC,GACnBC,QAAQC,IAAIqC,GAEZ,IAAIxB,EAAW,EAAKX,MAAMW,SAC1BA,EAASwB,GAAOvC,EAChB,EAAKwC,SAAS,CAAEzB,aAEhBd,QAAQC,IAAI,iDAAkDqC,GAC9DtC,QAAQC,IAAI,cAAe,EAAKE,MAAMW,UAEtC,IAAI4B,EAAa,EAAKvC,MAAMuC,WAC5BA,EAAWJ,GAAOvC,EAClB,EAAKwC,SAAS,CAAEG,eAIhB1C,QAAQC,IAAI,SAFC,KA/jBI,EAokBnB4J,UAAY,WAIV,OAAO,cAAC,EAAD,CAAUjE,gBAAiB,EAAK+D,kBAtkBvC,EAAKxJ,MAAQ,CACXwG,IAAK,GACLkB,IAAK,GACLnF,WAAY,GACZsD,KAAM,GACN0C,SAAU,GACV5H,SAAU,CAER6B,OAAQ,GACRC,WAAY,GACZC,IAAK,GACLC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRC,UAAW,GACXC,MAAO,GACPC,KAAM,GACNvD,MAAO,GACPwD,IAAK,KAGT,EAAKuF,SAAW,GAChB,IAAIxI,EAAO,EAAKoF,eAAeb,KAApB,gBA/BM,OAgCjB,EAAKa,eAAiBpF,EACtBA,EAAO,EAAKkH,2BAA2B3C,KAAhC,gBACP,EAAK2C,2BAA6BlH,EAClCA,EAAO,EAAKiH,sBAAsB1C,KAA3B,gBACP,EAAK0C,sBAAwBjH,EApCZ,E,0CA2kBnB,WACE,OACE,8BAEE,cAAC,EAAD,CACEoJ,SAAUzJ,KAAKF,MAAMW,SACrBjD,eAAgBwC,KAAKwI,0BACrB5K,kBAAmBoC,KAAK6H,6BACxB5L,aAAc+D,KAAKmH,qBACnB1J,aAAcuC,KAAKoH,qBACnB1J,WAAYsC,KAAKyH,mBACjB9J,aAAcqC,KAAK0H,qBACnB9D,YAAa5D,KAAK2H,uBAClBhE,cAAe3D,KAAKwG,sBACpB/C,kBAAmBzD,KAAK4H,mBACxB8B,UAAW1J,KAAKqJ,kBAChBtL,aAAciC,KAAK8H,qBACnB9J,WAAYgC,KAAK+H,mBACjBrE,yBAA0B1D,KAAKgI,0BAC/BzL,eAAgByD,KAAKuI,0BAErBzE,sBAAuB9D,KAAKwG,sBAC5B9J,eAAgBsD,KAAK2I,uBACrBxK,aAAc6B,KAAK4I,qBACnBxK,kBAAmB4B,KAAK8I,2BACxBa,mBAAoB3J,KACpB3B,oBAAqB2B,KAAK+I,4BAE1BlF,iBAAkB7D,KAAKiJ,kBACvBpM,iBAAkBmD,KAAKkJ,yBACvB/L,oBAAqB6C,KAAKgJ,4BAC1BlM,oBAAqBkD,KAAKmJ,4BAC1BtG,SAAU,QACVnC,aAAcV,KAAKU,qB,GA7mBFT,c,GCGLA,Y,wBC6bPuF,GCzcIvF,Y,+DDQjB,WAAYtB,GAAQ,IAAD,uBACjB,cAAMA,IAiCR8G,eAAiB,SAAC7D,EAAK8D,GACrB,EAAKxD,SAAS,CAAEyD,KAAM/D,IACtB,IAAIgE,EAAS,GACTC,EAAS,GACTC,EAAU,EACVC,EAASnE,EAAI1C,KAAI,SAAC8E,EAAS5E,GAC7B,IAAI4G,EAAOC,OAAOD,KAAKhC,GACnBkC,EAAS,GAoBb,OAjBAF,EAAK9G,KAAI,SAACC,GACHyG,EAAOO,SAAShH,IACnByG,EAAOvG,KAAKF,MAMhByG,EAAO1G,KAAI,SAACC,EAAKC,GACf8G,EAAO7G,KAAK,6BAAK2E,EAAQ7E,MAErB2G,EAAUF,EAAO5G,SACnB6G,EAAOxG,KAAK,oBAAIC,GAAG,SAAP,SAAiBsG,EAAOxG,MACpC0G,QAIG,oBAAIxG,GAAG,QAAP,SAAgB4G,OAGrBE,EACF,wBAAOrG,UAAU,QAAjB,UACE,uBAAOkE,MAAM,aAAb,SACE,6BAAK4B,MAEP,gCAAQE,OAGZnF,IAASC,OACP,qBAAKd,UAAU,OAAf,SAAuBqG,IACvBtF,SAASC,eAAe2E,IAE1B/F,QAAQC,IAAIgG,IA5EK,EA+EnB2B,2BAA6B,SAACC,EAAKoC,GACjCjK,QAAQC,IAAI,cACZ,IAAIT,EAAMqI,EACV5G,IAASC,OACP,qBAAKd,UAAU,OAAf,SAAuBZ,IACvB2B,SAASC,eAAe6I,KApFT,EAwFnBvD,kCAAoC,SAACC,EAAKC,GACxC,EAAKd,eAAea,EAAKC,GACzB5G,QAAQC,IAAI,8BAA+B2G,IA1F1B,EA6FnBY,qBAAuB,WACrB,IAAIV,EAAS,EAAKC,uCAAuC,CACvD,MACA,WACA,aACA,eAEFE,IAAMC,KAAK,2CAA4C,CAAEJ,WAAUK,MACjE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAtGzC,EA2GnBgC,uBAAyB,WACvB,IAAIlB,EAAS,EAAKC,uCAAuC,CAAC,cAE1DE,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,YAI1DiB,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACCpH,QAAQC,IAAI,gBAAiBmH,GACvBA,EAASpB,KAGf,EAAKU,kCAAkCU,EAASpB,KAAM,aA1HzC,EA+HnBkE,qCAAuC,WACrC,IAAIpD,EAAS,EAAKC,uCAAuC,CAAC,WAC1DD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,mDAAoD,CAC7DJ,WAECK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QAEX,EAAKX,kCAAkCU,EAASpB,KAAM,YAGzDsB,MACC,SAAUC,GACRlH,KAAKuH,2BACH,oEACA,SAEEL,GAC2B,KAAzBA,EAAMH,SAASC,QACjBrH,QAAQC,IAAI,0BAEhBgF,KATF,kBA/Ia,EA4JnBqD,kBAAoB,WAClB,IAAIxB,EAAS,EAAKC,uCAAuC,CAAC,WAE1DD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI6G,GACZG,IAAMC,KAAK,iDAAkD,CAC3DJ,WACCK,MAAK,SAACC,GACPpH,QAAQC,IAAImH,GACZ,MAAsCA,EAASpB,KAAK,GAChDtF,EAAO,CAAEiC,OADb,EAAMA,OACuBQ,UAD7B,EAAcA,UACqCC,SADnD,EAAyBA,UAEzBpD,QAAQC,IAAIS,GACZ,EAAK8H,mBAAmB9H,OAxKT,EA4KnB8H,mBAAqB,SAACC,GACpB,IAAM9F,EAA2D8F,EAA3D9F,OAAkBQ,GAAyCsF,EAAnDvF,SAAmDuF,EAAzCtF,WAAWC,EAA8BqF,EAA9BrF,SAA8BqF,EAApBhF,MAAoBgF,EAAbC,SAEpD,EAAKd,2BACH,gCACE,oBAAIxH,UAAU,cAAd,sCACA,qBAAIA,UAAU,cAAciB,MAAO,CAAEsH,eAAgB,aAArD,UACG,IACAxF,EAFH,IAEeC,EAFf,IAEyB,2CAAcT,EAAd,aAG3B,UAvLe,EA2LnBwH,4BAA8B,WAC5B,IAAIrD,EAAS,EAAKC,uCAAuC,CAAC,WAE1DD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBtB,IAAMC,KAAK,iDAAkD,CAC3DJ,WACCK,MAAK,SAACC,GACP,EAAKV,kCAAkCU,EAASpB,KAAM,aAlMvC,EAsMnBoE,yBAA2B,WACzB,EAAKlB,SAAW9L,IAAQT,iBACxB,IAAImK,EAAS,EAAKC,uCAAuC,CACvD,YACA,MACA,YACA,SAEF/G,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,iDAAkD,CAC3DJ,WACCK,MAAK,SAACC,GACPpH,QAAQC,IAAI,YACZD,QAAQC,IAAImH,OAnNG,EAuNnBwB,0BAA4B,WAC1B,IAAI9B,EAAS,EAAKC,uCAAuC,CAAC,cAE1DE,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aA5NzC,EAiOnBa,sBAAwB,WACtB,IAAIC,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,2CAA4C,CAAEJ,WACtDK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QACX,EAAKX,kCAAkCU,EAASpB,KAAM,YAGzDsB,OAAM,SAAUC,GACXA,GAC2B,KAAzBA,EAAMH,SAASC,QACjBrH,QAAQC,IAAI,+CA9OH,EAmPnB+I,uBAAyB,WACvB,IAAIlC,EAAS,EAAKC,uCAAuC,CACvD,WACA,cAGFD,EAAM,UAAgB,EAAK9H,MAAMuJ,gBAAX,OAEtBtB,IAAMC,KAAK,+CAAgD,CAAEJ,WAC1DK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QACX,EAAKO,2BACH,oBAAIxH,UAAU,cAAd,4CACA,YAILkH,MACC,SAAUC,GACJA,GAC2B,KAAzBA,EAAMH,SAASC,QACjBhH,KAAKuH,2BACH,oBAAIxH,UAAU,cAAd,sDAGA,UAGN6E,KAVF,kBAvQa,EAqRnBqE,kBAAoB,WAClB,IAAIxC,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,0CAA2C,CAAEJ,WAAUK,MAChE,SAACC,GACCpH,QAAQC,IAAImH,GACZ,EAAKV,kCAAkCU,EAASpB,KAAM,aA1RzC,EA+RnBuD,yBAA2B,WACzB,IAAIzC,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,iDAAkD,CAC3DJ,WACCK,MAAK,SAACC,GACPpH,QAAQC,IAAImH,GACZ,EAAKV,kCAAkCU,EAASpB,KAAM,aArSvC,EAySnBqD,4BAA8B,WAC5B,IACIvC,EAAS,CAAEuD,UADN,EAAKrL,MAAMuJ,gBAAX,QAETtB,IAAMC,KAAK,oDAAqD,CAC9DJ,WAECK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QACX,EAAKX,kCAAkCU,EAASpB,KAAM,YAGzDsB,OAAM,SAAUC,GACXA,EAC2B,KAAzBA,EAAMH,SAASC,QACjBrH,QAAQC,IAAI,wCAEdD,QAAQC,IAAI,oCA3TD,EAgUnBuJ,4BAA8B,WAC5B,IAAI1C,EAAS,EAAKC,uCAAuC,CAAC,cAC1DE,IAAMC,KAAK,oDAAqD,CAC9DJ,WAECK,MAAK,SAACC,GACLpH,QAAQC,IAAImH,EAASC,QAEE,KAAnBD,EAASC,QACX,EAAKX,kCAAkCU,EAASpB,KAAM,YAGzDsB,OAAM,SAAUC,GACXA,EAC2B,KAAzBA,EAAMH,SAASC,QACjBrH,QAAQC,IAAI,2CAEdD,QAAQC,IAAI,oCAjVD,EAsVnB8G,uCAAyC,SAAC0C,GACxC,IAAI3C,EAAS,GACTiC,EAAU,EAAK5I,MAAMuC,WAezB,OAdkB+G,EACNlK,KAAI,SAACC,GAObsH,EAAOtH,GANLA,KAAOuJ,EAMKA,EAAQvJ,GAER,MAIXsH,GAvWU,EA0WnB4C,kBAAoB,WAClB,IAAI5C,EAAS,EAAKC,uCAAuC,CAAC,WAE1DE,IAAMC,KAAK,wCAAyC,CAAEJ,WAAUK,MAC9D,SAACC,GACCpH,QAAQC,IAAImH,OA/WC,EAoXnBuC,eAAiB,SAACC,GAChB,IAAI9C,EAAS8C,EACb5J,QAAQC,IAAI,2BAA6B2J,GACzC,EAAKrH,SAAS,CAAEzB,SAAUgG,IAC1B9G,QAAQC,IAAI,EAAKE,MAAMW,UACvBd,QAAQC,IAAI,uBAzXK,EA4XnBc,aAAe,SAACuB,EAAKvC,GACnBC,QAAQC,IAAIqC,GAEZ,IAAIxB,EAAW,EAAKX,MAAMW,SAC1BA,EAASwB,GAAOvC,EAChB,EAAKwC,SAAS,CAAEzB,aAGhBd,QAAQC,IAAI,iDAAkDqC,GAC9DtC,QAAQC,IAAI,cAAe,EAAKE,MAAMW,UAEtC,IAAI4B,EAAa,EAAKvC,MAAMuC,WAC5BA,EAAWJ,GAAOvC,EAClB,EAAKwC,SAAS,CAAEG,gBAzYC,EA4YnBmH,UAAY,WAIV,OAAO,cAAC,EAAD,CAAUjE,gBAAiB,EAAK+D,kBA9YvC,EAAKxJ,MAAQ,CACXuC,WAAY,GACZ5B,SAAU,CAER6B,OAAQ,GACRC,WAAY,GACZC,IAAK,GACLC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRC,UAAW,GACXC,MAAO,GACPC,KAAM,GACNvD,MAAO,GACPwD,IAAK,GACL+E,SAAU,KAGd,EAAKQ,SAAW,GAChB,IAAIxI,EAAO,EAAKoF,eAAeb,KAApB,gBA5BM,OA6BjB,EAAKa,eAAiBpF,EACtBA,EAAO,EAAKkH,2BAA2B3C,KAAhC,gBACP,EAAK2C,2BAA6BlH,EA/BjB,E,0CAmZnB,WAsBE,OACE,qBAAKN,UAAU,aAAf,SACE,cAAC,EAAD,CACEA,UAAU,aACV3D,mBAAoB4D,KAAK6J,qCACzB5N,aAAc+D,KAAKmH,qBACnBvD,YAAa5D,KAAK2H,uBAClBtL,iBAAkB2D,KAAK8J,4BACvBxN,iBAAkB0D,KAAK+J,yBACvBxN,eAAgByD,KAAKuI,0BACrB/L,WAAYwD,KAAKwG,sBACjB9J,eAAgBsD,KAAK2I,uBACrB/L,UAAWoD,KAAKiJ,kBAChBpM,iBAAkBmD,KAAKkJ,yBACvB/L,oBAAqB6C,KAAKgJ,4BAC1BlM,oBAAqBkD,KAAKmJ,4BAC1BtG,SAAU,UACVnC,aAAcV,KAAKU,qB,GA5bFT,cEGZuF,E,kDAVb,WAAY7G,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CAAEqB,QAAS,cAAC,EAAD,CAAQ0B,SAAU,EAAKlE,MAAMkE,YAFpC,E,0CAKnB,WACE,OAAO,4B,GAPgB5C,a,iBCwWZuF,GCtWIvF,Y,kDDMjB,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IA6BR8G,eAAiB,SAAC7D,EAAK8D,GACrB,EAAKxD,SAAS,CAAEyD,KAAM/D,IACtB,IAAIgE,EAAS,GACTC,EAAS,GACTC,EAAU,EACVC,EAASnE,EAAI1C,KAAI,SAAC8E,EAAS5E,GAC7B,IAAI4G,EAAOC,OAAOD,KAAKhC,GACnBkC,EAAS,GAoBb,OAjBAF,EAAK9G,KAAI,SAACC,GACHyG,EAAOO,SAAShH,IACnByG,EAAOvG,KAAKF,MAMhByG,EAAO1G,KAAI,SAACC,EAAKC,GACf8G,EAAO7G,KAAK,6BAAK2E,EAAQ7E,MAErB2G,EAAUF,EAAO5G,SACnB6G,EAAOxG,KAAK,oBAAIC,GAAG,SAAP,SAAiBsG,EAAOxG,MACpC0G,QAIG,oBAAIxG,GAAG,QAAP,SAAgB4G,OAGrBE,EACF,wBAAOrG,UAAU,QAAjB,UACE,uBAAOkE,MAAM,aAAb,SACE,6BAAK4B,MAEP,gCAAQE,OAGZnF,IAASC,OACP,qBAAKd,UAAU,OAAf,SAAuBqG,IACvBtF,SAASC,eAAe2E,IAE1B/F,QAAQC,IAAIgG,IAxEK,EA2EnB2B,2BAA6B,SAACC,GAC5B7H,QAAQC,IAAI,cACZ,IAAIT,EAAM,6BAAKqI,IACf5G,IAASC,OACP,qBAAKd,UAAU,OAAf,SAAuBZ,IACvB2B,SAASC,eAAe,WAhFT,EAoFnBsF,kCAAoC,SAACC,EAAKC,GACxC,EAAKd,eAAea,EAAKC,GACzB5G,QAAQC,IAAI,8BAA+B2G,IAtF1B,EAyFnBY,qBAAuB,WACrB,IAAIV,EAAS,EAAKC,uCAAuC,CACvD,aAEFE,IAAMC,KAAK,6CAA8C,CAAEJ,WAAUK,MACnE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aA/FzC,EAoGnBgC,uBAAyB,WACvB,IAAIlB,EAAS,EAAKC,uCAAuC,CAAC,cAC1DD,EAAM,UAAgB,EAAK9H,MAAMuJ,gBAAX,OAEtBtB,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,YAI1DiB,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACCpH,QAAQC,IAAI,gBAAiBmH,GACvBA,EAASpB,KAGf,EAAKU,kCAAkCU,EAASpB,KAAM,aApHzC,EAyHnBiC,mBAAqB,WACnB,EAAKiB,SAAW9L,IAAQK,WACxB,IAAIqJ,EAAS,EAAKC,uCAAuC,CACvD,YACA,QAEFD,EAAM,UAAgB,EAAK9H,MAAMuJ,gBAAX,OACtBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,2CAA4C,CAAEJ,WAAUK,MACjE,SAACC,GACCpH,QAAQC,IAAI,YACZD,QAAQC,IAAImH,OApIC,EAwInBiB,0BAA4B,WAC1B,EAAKa,SAAW9L,IAAQM,kBACxB,IAAIoJ,EAAS,EAAKC,uCAAuC,CACvD,YACA,QAEFD,EAAM,UAAgB,EAAK9H,MAAMuJ,gBAAX,OACtBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,kDAAmD,CAAEJ,WAAUK,MACxE,SAACC,GACCpH,QAAQC,IAAI,YACZD,QAAQC,IAAImH,OAnJC,EAuJnBwB,0BAA4B,WAC1B,EAAKM,SAAW9L,IAAQR,eACxB,IAAIkK,EAAS,EAAKC,uCAAuC,CACvD,WAEFD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAhKzC,EAoKnBa,sBAAwB,WACtB,EAAKqC,SAAW9L,IAAQP,WACxB,IAAIiK,EAAS,EAAKC,uCAAuC,CACvD,WAEFD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,2CAA4C,CAAEJ,WAAUK,MACjE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aA7KzC,EAiLnBgD,uBAAyB,WACvB,EAAKE,SAAW9L,IAAQL,eACxB,IAAI+J,EAAS,EAAKC,uCAAuC,CACvD,WACA,cAEFD,EAAM,UAAgB,EAAK9H,MAAMuJ,gBAAX,OACtBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,+CAAgD,CAAEJ,WAAUK,MACrE,SAACC,GACCpH,QAAQC,IAAI,YACZD,QAAQC,IAAImH,OA5LC,EAgMnBkD,oBAAsB,WACpB,EAAKpB,SAAW9L,IAAQO,YACxB,IAAImJ,EAAS,EAAKC,uCAAuC,CACvD,WAEFD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,4CAA6C,CAAEJ,WAAUK,MAClE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAzMzC,EA6MnBsD,kBAAoB,WAClB,EAAKJ,SAAW9L,IAAQH,UACxB,IAAI6J,EAAS,EAAKC,uCAAuC,CACvD,WAEFD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,0CAA2C,CAAEJ,WAAUK,MAChE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAtNzC,EA0NnBuD,yBAA2B,WACzB,EAAKL,SAAW9L,IAAQF,iBACxB,IAAI4J,EAAS,EAAKC,uCAAuC,CACvD,WAEFD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,iDAAkD,CAAEJ,WAAUK,MACvE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAnOzC,EAuOnBuE,gCAAkC,WAChC,EAAKrB,SAAW9L,IAAQQ,qBACxB,IAAIkJ,EAAS,EAAKC,uCAAuC,CACvD,WAEFD,EAAM,OAAa,EAAK9H,MAAMuJ,gBAAX,OACnBvI,QAAQC,IAAI,2BAA6B6G,GACzCG,IAAMC,KAAK,iDAAkD,CAAEJ,WAAUK,MACvE,SAACC,GACC,EAAKV,kCAAkCU,EAASpB,KAAM,aAhPzC,EAoPnB2D,eAAiB,SAACC,GAChB,IAAI9C,EAAS8C,EACb,EAAKrH,SAAS,CAAEzB,SAAUgG,IAC1B9G,QAAQC,IAAI,EAAKE,MAAMW,UACvBd,QAAQC,IAAI,uBAxPK,EA2PnB4J,UAAY,WACV,IAAIrK,EAAM,cAAC,EAAD,CAAUoG,gBAAiB,EAAK+D,iBAC1C1I,IAASC,OAAO1B,EAAK2B,SAASC,eAAe,SAC7C,EAAKmB,WACLvC,QAAQC,MACRD,QAAQC,IAAI,qBAhQK,EAmQnB8G,uCAAyC,SAAC0C,GACxC,IAAI3C,EAAS,GACTiC,EAAU,EAAK5I,MAAMuC,WAezB,OAdkB+G,EACNlK,KAAI,SAACC,GAObsH,EAAOtH,GANLA,KAAOuJ,EAMKA,EAAQvJ,GAER,MAIXsH,GApRU,EAuRnB4C,kBAAoB,WAClB,IAAI5C,EAAS,EAAKC,uCAAuC,CAAC,WAE1DE,IAAMC,KAAK,wCAAyC,CAAEJ,WAAUK,MAC9D,SAACC,GACCpH,QAAQC,IAAImH,OA5RC,EAiSnBuC,eAAiB,SAACC,GAChB,IAAI9C,EAAS8C,EACb5J,QAAQC,IAAI,2BAA6B2J,GACzC,EAAKrH,SAAS,CAAEzB,SAAUgG,IAC1B9G,QAAQC,IAAI,EAAKE,MAAMW,UACvBd,QAAQC,IAAI,uBAtSK,EAySnBc,aAAe,SAACuB,EAAKvC,GACnBC,QAAQC,IAAIqC,GAEZ,IAAIxB,EAAW,EAAKX,MAAMW,SAC1BA,EAASwB,GAAOvC,EAChB,EAAKwC,SAAS,CAAEzB,aAGhBd,QAAQC,IAAI,iDAAkDqC,GAC9DtC,QAAQC,IAAI,cAAe,EAAKE,MAAMW,UAEtC,IACI4B,EAAa,EAAKvC,MAAMuC,WAC5BA,EAAWJ,GAAOvC,EAClB,EAAKwC,SAAS,CAAEG,eAKhB1C,QAAQC,IAAI,SAHC,KAzTI,EA+TnB4J,UAAY,WAIV,OAAO,cAAC,EAAD,CAAUjE,gBAAiB,EAAK+D,kBAjUvC,EAAKxJ,MAAQ,CACXuC,WAAY,GACZ5B,SAAU,CAER6B,OAAQ,GACRC,WAAY,GACZC,IAAK,GACLC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRC,UAAW,GACXC,MAAO,GACPC,KAAM,GACNvD,MAAO,GACPwD,IAAK,GACL+E,SAAU,KAGd,EAAKQ,SAAW,GA3BC,E,0CAsUnB,WAGE,OACE,gCACG7I,KAAKwJ,YACN,cAAC,EAAD,CACEvN,aAAc+D,KAAKmH,qBACnBvD,YAAa5D,KAAK2H,uBAClBvK,WAAY4C,KAAK4H,mBACjBvK,kBAAmB2C,KAAKgI,0BACxBzL,eAAgByD,KAAKuI,0BACrB/L,WAAYwD,KAAKwG,sBACjB9J,eAAgBsD,KAAK2I,uBACrBrL,YAAa0C,KAAKiK,oBAClBrN,UAAWoD,KAAKiJ,kBAChBpM,iBAAkBmD,KAAKkJ,yBACvBjL,iBAAkB+B,KAAKkK,gCACvBrH,SAAU,UACVnC,aAAcV,KAAKU,sB,GA1VFT,cE2OZkK,E,kDAlOb,WAAYxL,GAAQ,IAAD,8BACjB,cAAMA,IAuGRyL,YAAc,SAAC9F,EAAMC,EAAM1B,GACzB,IAAIwH,EAAa,GAEjBzD,IAAMC,KAAK,mCAAoC,CAC7CyD,KAAM,CAAEC,SAAUjG,EAAM+D,SAAU9D,EAAM1B,SAAUA,GAClD0H,SAAUjG,EACV+D,SAAU9D,EACV1B,SAAUA,IACTiE,MAAK,SAACC,GAEP,GADApH,QAAQC,IAAImH,EAASpB,KAAK6E,WACtBzD,EAASpB,KAAK6E,UAAW,CAC3B,IAAIlI,EAASyE,EAASpB,KAAKrD,OACvBO,EAAWkE,EAASpB,KAAK9C,SAEzB6B,EAAYqC,EAASpB,KAAKjB,UAC1BwD,EAAkB,CACpB5F,OAAQA,EACR+F,SAAU9D,EACVG,UAAWA,EACX7B,SAAUkE,EAASpB,KAAK9C,UAK1B,OAHAlD,QAAQC,IAAImH,EAASpB,KAAK9C,UAC1B,EAAKX,SAAS,CAAEgG,oBAERrF,GACN,IAAK,QACHjC,IAASC,OACP,cAAC,EAAD,CACEgC,SAAU,QACVpC,SAAU,EAAKX,MAAMW,SACrByH,gBAAiB,EAAKpI,MAAMoI,kBAE9BpH,SAASC,eAAe,WAE1B,MACF,IAAK,UACHH,IAASC,OACP,cAAC,EAAD,aACEqH,gBAAiB,EAAKpI,MAAMoI,gBAC5BrF,SAAU,UACVpC,SAAU,EAAKX,MAAMW,UAHvB,kBAImB,EAAKX,MAAMoI,kBAE9BpH,SAASC,eAAe,WAE1BpB,QAAQC,IAAI,WACZ,MACF,IAAK,iBACHgB,IAASC,OACP,cAAC,EAAD,CACEgC,SAAU,gBACVpC,SAAU,EAAKX,MAAMW,SACrByH,gBAAiB,EAAKpI,MAAMoI,kBAE9BpH,SAASC,eAAe,WAE5B,IAAK,UACHH,IAASC,OACP,cAAC,EAAD,CACEgC,SAAU,UACVpC,SAAU,EAAKX,MAAMW,SACrByH,gBAAiB,EAAKpI,MAAMoI,kBAE9BpH,SAASC,eAAe,WAE1BpB,QAAQC,IAAI,SACZ,MACF,QACED,QAAQC,IAAI,sBAgBhByK,EACE,yBAA2B,EAAKvK,MAAMoI,gBAAgB5F,OAExD,EAAKJ,SAAS,CAAEmI,oBAIhBA,EAAa,+CACb,EAAKnI,SAAS,CAAEmI,mBAlMpB,EAAKvK,MAAQ,CACXoI,gBAAiB,CACf5F,OAAQ,GACR+F,SAAU,GACV3D,UAAW,IAEbjE,SAAU,CAER6B,OAAQ,GACRG,SAAU,GACVI,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRG,KAAM,GACNvD,MAAO,GACPwD,IAAK,IAEPiH,SAAU,IACVlC,SAAU,GACVlF,UAAW,EACXkH,WAAY,SAGd,EAAKI,SAAW,IA5BC,E,yDAyMnB,SAAsBC,GACpB9J,IAASC,OAAO,8BAAM6J,IAAc5J,SAASC,eAAe,a,oBAG9D,WACE,OACE,eAAC,IAAM4J,SAAP,WACE,sBAAK5K,UAAU,MAAf,UACE,qBAAKA,UAAU,UACf,6BAAKC,KAAKF,MAAMuK,aAChB,qBAAKtK,UAAU,QAAf,SACE,cAAC,EAAD,CAAOgF,cAAe/E,KAAKoK,mBAG/B,sBAAKrK,UAAU,MAAf,UACE,cAAC,EAAD,CAAclB,OAAQ,CAAC,eACvB,qBAAKS,GAAG,SAASS,UAAU,aAG7B,+B,GA7NUE,aCfgBA,YCSlCW,IAASC,OACP,8BAEE,qBAAKd,UAAU,OAAf,SAKE,cAAC,EAAD,QAGJe,SAASC,eAAe,U,uGCtB1B,IAAMhE,EAAUC,EAAQ,KAElBC,EAAqB,CACvBO,eAAgBT,EAAQS,eACxBvB,aAAcc,EAAQd,aACtBwB,aAAcV,EAAQU,aACtBC,WAAYX,EAAQW,WACpBC,aAAcZ,EAAQY,aACtBiG,YAAa7G,EAAQ6N,6BACrBC,aAAc9N,EAAQ+N,6BACtB1N,WAAYL,EAAQK,WACpB2N,uBAAwBhO,EAAQgO,uBAChChN,aAAchB,EAAQgB,aACtBC,WAAYjB,EAAQiB,WACpBX,kBAAmBN,EAAQM,kBAC3BY,iBAAkBlB,EAAQkB,iBAC1B1B,eAAgBQ,EAAQR,eACxBC,WAAYO,EAAQP,WACpBE,eAAgBK,EAAQL,eACxByB,aAAcpB,EAAQoB,aACtBC,kBAAmBrB,EAAQqB,kBAC3BC,oBAAqBtB,EAAQsB,oBAC7BzB,UAAWG,EAAQH,UACnBC,iBAAkBE,EAAQF,iBAC1BM,oBAAqBJ,EAAQI,oBAC7BL,oBAAqBC,EAAQD,qBAGjCf,EAAOC,QAAUiB,I","file":"static/js/main.f4aaca33.chunk.js","sourcesContent":["module.exports = {\n  // [STUDENT, FACULTY, ADMIN] Course Search Query\n  // USER INPUT: Multiple field inputs possible, WHERE clause in last line get\n  // replaced depending on field, can be more than one by using AND\n  // VARIABLE VALUES:\n  // finalList.crn = '?';\n  // finalList.courseID LIKE '%?%';\n  // finalList.courseName LIKE '%?%'; (percent symbols are wildcards, this returns anything containing whats between them\n  // finalList.Instructor LIKE '%?%'; */\n  courseSearch:\n    \"SELECT finalList.crn AS 'CRN', finalList.courseID AS 'Course ID', finalList.courseName AS 'Course Name', finalList.roomID AS 'Room', \\n\" +\n    \"finalList.Instructor, finalList.Days, finalList.Time, finalList.semYear AS 'Semester' FROM\\n\" +\n    \"(SELECT courseList.*, times1.TSID, CONCAT (substring(times1.day,1,1),'/',substring(times2.day,1,1)) AS 'Days', times1.Time FROM\\n\" +\n    \"(SELECT S2022.crn, S2022.courseID, S2022.courseName, S2022.roomID,\\n\" +\n    \"CONCAT (u.firstName, ', ', u.lastName) as 'Instructor', S2022.semYear, S2022.timeSlot1, S2022.timeSlot2 FROM user u\\n\" +\n    \"RIGHT JOIN (SELECT s.crn, s.courseID, catalog.courseName, catalog.deptName, s.roomID, s.facultyID, s.semYear, s.timeSlot1, s.timeSlot2 from section s\\n\" +\n    \"RIGHT JOIN (SELECT d.deptID, d.deptName, c.courseID, c.courseName FROM dept d\\n\" +\n    \"JOIN course c ON d.deptID=c.deptID) AS catalog ON s.courseID=catalog.courseID\\n\" +\n    \"WHERE s.semYear='S2022') AS S2022 ON u.userID=S2022.facultyID) AS courseList\\n\" +\n    \"LEFT JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as times1\\n\" +\n    \"ON courseList.timeSlot1=times1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as times2\\n\" +\n    \"ON courseList.timeslot2=times2.TSID) AS finalList WHERE finalList.courseID LIKE '%?%';\",\n\n  // [STUDENT, FACULTY, ADMIN] Degree Audit - Two Part Query, first gets % complete, second gets courses\n  // USER INPUT: studentID\n  degreeAuditPt1:\n    \"SELECT COUNT(*) AS 'Courses Completed', total.total AS 'Courses Needed', \\n\" +\n    \"CONCAT(FORMAT((COUNT(*)/total.total)*100,2),'%') AS 'Percent Complete' FROM studentHistory sh\\n\" +\n    \"JOIN (SELECT sm.studentID, sm.majorID, COUNT(*) AS 'total' FROM studentMajor sm\\n\" +\n    \"JOIN majorCourse mc ON sm.majorID=mc.majorID\\n\" +\n    \"WHERE sm.studentID=?) AS total ON sh.studentID=total.studentID;\",\n\n  degreeAuditPt2:\n    \"SELECT c1.courseID AS 'Course', c1.courseName AS 'Title', sh2.grade AS 'Grade', \\n\" +\n    \"c1.numCredits AS 'Credits', sh2.semYear AS 'Term' FROM course c1\\n\" +\n    \"JOIN (SELECT sh1.studentID, sh1.crn, sh1.semYear, sec1.courseID, sh1.grade FROM studentHistory sh1\\n\" +\n    \"JOIN section sec1 ON sh1.crn=sec1.crn) AS sh2 ON c1.courseID=sh2.courseID\\n\" +\n    \"WHERE sh2.studentID=? ORDER BY SUBSTRING(sh2.semYear,2,4) ASC;\",\n\n  // [FACULTY] View courses assigned to as Instructor\n  // AUTO-FILL INPUT: facultyID for current user\n  assignedCourseList:\n    \"SELECT list.crn AS 'CRN', list.courseID AS 'Course ID', c.courseName AS 'Course Name', list.roomID As 'Room', \\n\" +\n    \"list.faculty AS 'Instructor', list.semYear as 'Semester', list.Days, list.Time, list.facultyID FROM course c\\n\" +\n    \"JOIN (SELECT s.crn, s.courseID, s.roomID, s.semYear, s.facultyID, CONCAT(u.lastName, ', ', u.firstName) AS 'faculty', \\n\" +\n    \"CONCAT(SUBSTRING(tSlots1.day,1,1),'/',SUBSTRING(tSlots2.day,1,1)) as Days, tSlots2.Time FROM section s\\n\" +\n    \"JOIN user u ON s.facultyID=u.userID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1\\n\" +\n    \"ON s.timeslot1=tSlots1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\" +\n    \"ON s.timeslot2=tSlots2.TSID) AS list ON list.courseID=c.courseID WHERE (list.semYear='F2021' OR list.semYear='S2022') \\n\" +\n    \"AND facultyID='?' ORDER BY semYear;\",\n\n  // [FACULTY] Retreive student's user info\n  // AUTO-FILL INPUT: userID for current user\n  // This is the query that should be used to display info on the FACULTY landing page\n  facultyLoginInfo:\n    \"SELECT u.userID, u.userType, u.firstName, u.lastName, l.userEmail, l.password FROM\\n\" +\n    \"user u RIGHT JOIN loginInfo l ON u.userID=l.userID WHERE u.userID='?';\",\n\n  // [FACULTY] Record Attendance\n  // USER INPUT: All values required, query must fail if any are missing\n  // Parameters: studentID- 9 digit INT, CRN-5 digit INT, eNum- ('Yes' or 'No'), date- YYYY-MM-DD format\n  recordAttendance:\n    \"INSERT INTO attendance(studentID, crn, isPresent, date) VALUES ('?', '?', '?', '?');\",\n\n  // [STUDENT, FACULTY, ADMIN] Query to retrieve student's history*/\n  // USER INPUT: studentID\n  studentHistory:\n    \"SELECT instructor.studentID AS 'Student ID', instructor.crn AS 'CRN', instructor.courseID AS 'Course ID', \\n\" +\n    \"instructor.courseName AS 'Course Name', instructor.semYear AS 'Semester', \\n\" +\n    \"CONCAT(u.lastName,', ',u.firstName) AS 'Professor', instructor.grade AS 'Instructor' FROM user u JOIN\\n\" +\n    \"(SELECT f.facultyID, courseHistory.studentID, courseHistory.courseID, courseHistory.courseName, courseHistory.crn, courseHistory.semYear, courseHistory.grade FROM faculty f\\n\" +\n    \"JOIN (SELECT history.studentID, course.courseID, course.courseName, history.crn, history.semYear, history.grade, history.facultyID FROM course\\n\" +\n    \"JOIN (SELECT sh.studentID, sh.crn, s.courseID, sh.semYear, sh.grade, s.facultyID FROM studentHistory sh JOIN \\n\" +\n    \"section s ON sh.crn=s.crn) AS history ON history.courseID=course.courseID) AS courseHistory\\n\" +\n    \"ON courseHistory.facultyID=f.facultyID) AS instructor ON u.userID=instructor.facultyID\\n\" +\n    \"WHERE studentID=? ORDER BY studentID ASC;\",\n\n  // [STUDENT, FACULTY, ADMIN] View student transcript\n  // USER INPUT: studentID\n  transcript:\n    \"SELECT SUBSTRING(c1.courseID,1,2) AS 'Subject', SUBSTRING(c1.courseID,3,3) AS 'Course', c1.courseName AS 'Title', sh2.grade AS 'Grade', \\n\" +\n    \"c1.numCredits AS 'Credit Hours', sh2.semYear AS 'Term' FROM course c1\\n\" +\n    \"JOIN (SELECT sh1.studentID, sh1.crn, sh1.semYear, sec1.courseID, sh1.grade FROM studentHistory sh1\\n\" +\n    \"JOIN section sec1 ON sh1.crn=sec1.crn) AS sh2 ON c1.courseID=sh2.courseID\\n\" +\n    \"WHERE sh2.studentID=? ORDER BY SUBSTRING(sh2.semYear,2,4) ASC;\",\n  /* Amir gave me this algorithm to convert a grade letter into a GPA, which we should display somewhere on the Transcript page:\n    arrayOfGradeLatters= [\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"F\"];\n    arrayOfGradeValues= [4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.0];\n    for(i=0; i< len(grades);i++){\n        gradeindex = array_search(grades[i], arrayOfGradeLatters);\n        gradeadder += floatval($arrayOfGradeValues[$gradeindex]);\n        GPA = floatval(gradeadder/len(grades));\n    } Then you'd return GPA of course */\n\n    updateGrade:\n    \"UPDATE enrollment SET grade='?' WHERE studentID='?' AND crn='?';\",\n\n  // [STUDENT, FACULTY, ADMIN] Query to update password\n  // USER INPUTS: password\n  // AUTO-FILL: userID for current user\n  updatePassword: \"UPDATE loginInfo SET password='?' WHERE userID='?';\",\n\n  // [FACULTY] Retrieve a list of Students Advisees assigned to the Faculty user\n  // AUTO-FILL: facultyID for current user\n  viewAdvisees:\n    \"SELECT students.studentID AS 'Student ID', CONCAT(students.LastName,', ',students.firstName) AS 'Student Name',\\n\" +\n    \"students.phoneNumber AS 'Student Phone', l.userEmail AS 'Student Email' FROM loginInfo l\\n\" +\n    \"RIGHT JOIN (SELECT facList.studentID, u.firstName, u.lastName, u.phoneNumber FROM user u\\n\" +\n    \"JOIN (SELECT studentID FROM advisor WHERE facultyID=?) AS facList\\n\" +\n    \"WHERE facList.studentID=u.userID) AS students ON students.studentID=l.userID\\n\" +\n    \"ORDER BY students.lastName ASC;\",\n\n  // [STUDENT, FACULTY, ADMIN] Query to retireve a student's holds*/\n  // USER INPUT: studentID (for Faculty, Admin)\n  viewHolds:\n    \"SELECT sHolds.studentID AS 'Student ID', sHolds.studentName AS 'Student Name', \\n\" +\n    \"h.holdDesc AS 'Description', h.holdType AS 'Type of Hold', sHolds.dateAdded AS 'Date Applied' FROM hold h\\n\" +\n    \"JOIN (SELECT sh.holdName, sh.DateAdded, studentInfo.studentID, studentInfo.studentName FROM studentHold sh\\n\" +\n    \"JOIN (SELECT s.studentID, CONCAT(u.lastName,', ',u.firstName) AS studentName FROM user u\\n\" +\n    \"JOIN student s ON u.userID=s.studentID) AS studentInfo ON studentInfo.studentID=sh.studentID) AS sHolds\\n\" +\n    \"ON h.holdName=sHolds.holdName WHERE sHolds.studentID=?;\",\n\n  // [STUDENT, FACULTY, ADMIN] View Student's registration for next semester*/\n  // USER INPUT: studentID (for Faculty, Admin)\n  viewRegistration:\n    \"SELECT courseHist.*, e.grade AS 'Current Grade', DATE_FORMAT(e.dateEnrolled, '%m/%d/%Y') AS 'Date Enrolled' FROM enrollment e \\n\" +\n    \"JOIN (SELECT list.crn AS 'CRN', list.courseID AS 'Course ID', c.courseName AS 'Course Name', list.roomID As 'Room',  \\n\" +\n    \"list.faculty AS 'Instructor', list.semYear as 'Semester', list.Days, list.Time FROM course c\\n\" +\n    \"JOIN (SELECT s.crn, s.courseID, s.roomID, s.semYear, s.facultyID, CONCAT(u.lastName, ', ', u.firstName) AS 'faculty', \\n\" +\n    \"CONCAT(SUBSTRING(tSlots1.day,1,1),'/',SUBSTRING(tSlots2.day,1,1)) as Days, tSlots2.Time FROM section s\\n\" +\n    \"JOIN user u ON s.facultyID=u.userID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID JOIN day d ON tsd.dayID=d.dayID\\n\" +\n    \"JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1 ON s.timeslot1=tSlots1.TSID JOIN\\n\" +\n    \"(SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day,\\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID\tJOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\" +\n    \"ON s.timeslot2=tSlots2.TSID) AS list ON list.courseID=c.courseID ORDER BY list.semYear DESC, list.courseID) AS courseHist\\n\" +\n    \"ON e.crn=courseHist.crn WHERE courseHist.Semester='S2022' AND studentID=?;\",\n\n  // [FACULTY, ADMIN] Access a Student's schedule\n  // USER INPUT: studentID\n  viewStudentSchedule:\n    \"SELECT final.Student, final.studentID As 'StudentID', final.crn AS 'CRN', final.courseID AS 'Course ID',\\n\" +\n    \"final.courseName AS 'Course Name', final.roomID AS 'Room', final.Instructor, final.semYear AS 'Semester', final.Days, final.Time FROM \\n\" +\n    \"(SELECT CONCAT(u2.lastName,', ',u2.firstName) AS 'Student', studentSet.* FROM user u2 JOIN\\n\" +\n    \"(SELECT e.studentID, facultySet.* FROM enrollment e JOIN\\n\" +\n    \"(SELECT CONCAT(u.lastName,', ',u.firstName) AS 'Instructor', courseSet.* FROM user u JOIN\\n\" +\n    \"(SELECT c.courseName, timeset.* FROM course c JOIN \\n\" +\n    \"(SELECT s.crn, s.courseID, s.facultyID, s.roomID, s.semYear, CONCAT(SUBSTRING(tSlots1.Day,1,1),\\n\" +\n    \"'/',SUBSTRING(tSlots2.Day,1,1)) AS Days, tSlots1.Time FROM section s JOIN\\n\" +\n    \"(SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1\\n\" +\n    \"ON s.timeslot1=tSlots1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\" +\n    \"ON s.timeslot2=tSlots2.TSID) AS timeset ON c.courseID=timeset.courseID) AS courseSet\\n\" +\n    \"ON u.userID=courseSet.facultyID) AS facultySet ON e.crn=facultySet.crn) AS studentSet\\n\" +\n    \"ON studentSet.studentID=u2.userID) AS final WHERE final.studentID=?;\",\n};\n","const queries = require(\"../../queries/FacultyQueries.js\");\n\nconst permissibleQueries = {\n  courseSearch: queries.courseSearch,\n  degreeAuditPt1: queries.degreeAuditPt1,\n  degreeAuditPt2: queries.degreeAuditPt2,\n  assignedCourseList: queries.facultyAssignedCourseList,\n  facultyLoginInfo: queries.facultyLoginInfo,\n  recordAttendance: queries.recordAttendance,\n  studentHistory: queries.studentHistory,\n  transcript: queries.transcript,\n  updatePassword: queries.updatePassword,\n  viewHolds: queries.viewHolds,\n  viewRegistration: queries.viewRegistration,\n  viewStudentAdvisees: queries.viewStudentAdvisees,\n  viewStudentSchedule: queries.viewStudentSchedule,\n};\n\nmodule.exports = permissibleQueries;\n","const queries = require(\"../../queries/StudentQueries.js\");\n\nconst permissibleQueries = {\n  courseSearch: queries.courseSearch,\n  degreeAuditPt1: queries.degreeAuditPt1,\n  degreeAuditPt2: queries.degreeAuditPt2,\n  dropCourse: queries.dropCourse,\n  registerForCourse: queries.registerForCourse,\n  studentHistory: queries.studentHistory,\n  transcript: queries.transcript,\n  updatePassword: queries.updatePassword,\n  viewAdvisor: queries.viewAdvisor,\n  viewHolds: queries.viewHolds,\n  viewRegistration: queries.viewRegistration,\n  viewStudentLoginInfo: queries.viewStudentLoginInfo\n};\n\nmodule.exports = permissibleQueries;\n","module.exports = {\n  // [ADMIN] Retreive student's user info\n  // AUTO-FILL INPUT: userID for current user\n  // This is the query that should be used to display info on the ADMIN landing page\n  adminLoginInfo:\n    \"SELECT u.userID, u.userType, u.firstName, u.lastName, l.userEmail, l.password FROM\\n\" +\n    \"user u RIGHT JOIN loginInfo l ON u.userID=l.userID WHERE u.userID=?;\",\n\n  // [STUDENT, FACULTY, ADMIN] Course Search Query\n  // USER INPUT: Multiple field inputs possible, WHERE clause in last line get\n  // replaced depending on field, can be more than one by using AND\n  // VARIABLE VALUES:\n  // finalList.crn = '?';\n  // finalList.courseID LIKE '%?%';\n  // finalList.courseName LIKE '%?%'; (percent symbols are wildcards, this returns anything containing whats between them\n  // finalList.Instructor LIKE '%?%'; */\n  courseSearch:\n    \"SELECT finalList.crn AS 'CRN', finalList.courseID AS 'Course ID', finalList.courseName AS 'Course Name', finalList.roomID AS 'Room', \\n\" +\n    \"finalList.Instructor, finalList.Days, finalList.Time, finalList.semYear AS 'Semester' FROM\\n\" +\n    \"(SELECT courseList.*, times1.TSID, CONCAT (substring(times1.day,1,1),'/',substring(times2.day,1,1)) AS 'Days', times1.Time FROM\\n\" +\n    \"(SELECT S2022.crn, S2022.courseID, S2022.courseName, S2022.roomID,\\n\" +\n    \"CONCAT (u.firstName, ', ', u.lastName) as 'Instructor', S2022.semYear, S2022.timeSlot1, S2022.timeSlot2 FROM user u\\n\" +\n    \"RIGHT JOIN (SELECT s.crn, s.courseID, catalog.courseName, catalog.deptName, s.roomID, s.facultyID, s.semYear, s.timeSlot1, s.timeSlot2 from section s\\n\" +\n    \"RIGHT JOIN (SELECT d.deptID, d.deptName, c.courseID, c.courseName FROM dept d\\n\" +\n    \"JOIN course c ON d.deptID=c.deptID) AS catalog ON s.courseID=catalog.courseID\\n\" +\n    \"WHERE s.semYear='S2022') AS S2022 ON u.userID=S2022.facultyID) AS courseList\\n\" +\n    \"LEFT JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as times1\\n\" +\n    \"ON courseList.timeSlot1=times1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as times2\\n\" +\n    \"ON courseList.timeslot2=times2.TSID) AS finalList WHERE finalList.courseID LIKE '%?%';\",\n\n  // [ADMIN] Create a course\n  // USER INPUT: All values required, query must fail if any are missing\n  // Parameters: courseID- 5 CHAR, courseName- String, credits- single digit INT, deptID- 3 CHAR ('D##')\n  createCourse:\n    \"INSERT INTO course(courseID, courseName, numCredits, deptID) VALUES('?', '?', '?', '?');\",\n\n  // [ADMIN] Create a user\n  // USER INPUT: All values required, query must fail if any are missing\n  // Parameters: userID-9 digits INT, userType-dropdown selection, first/last - String\n  // phoneNumber-10 digits no spaces/dashes, DOB- YYYY-MM-DD, street/city - String, zip-5 digit INT\n  createUser:\n    \"INSERT INTO user(userID, userType, firstName, lastName, phoneNumber, DOB, street, city, state, zip)\\n\" +\n    \"VALUES('?', '?', '?', '?', '?', '?', '?', '?', '?', '?');\",\n\n  // [STUDENT, FACULTY, ADMIN] Degree Audit - Two Part Query, first gets % complete, second gets courses\n  // USER INPUT: studentID\n  degreeAuditPt1:\n    \"SELECT COUNT(*) AS 'Courses Completed', total.total AS 'Courses Needed', \\n\" +\n    \"CONCAT(FORMAT((COUNT(*)/total.total)*100,2),'%') AS 'Percent Complete' FROM studentHistory sh\\n\" +\n    \"JOIN (SELECT sm.studentID, sm.majorID, COUNT(*) AS 'total' FROM studentMajor sm\\n\" +\n    \"JOIN majorCourse mc ON sm.majorID=mc.majorID\\n\" +\n    \"WHERE sm.studentID='?') AS total\\n\" +\n    \"ON sh.studentID=total.studentID;\",\n\n  degreeAuditPt2:\n    \"SELECT c1.courseID AS 'Course', c1.courseName AS 'Title', sh2.grade AS 'Grade', \\n\" +\n    \"c1.numCredits AS 'Credits', sh2.semYear AS 'Term' FROM course c1\\n\" +\n    \"JOIN (SELECT sh1.studentID, sh1.crn, sh1.semYear, sec1.courseID, sh1.grade FROM studentHistory sh1\\n\" +\n    \"JOIN section sec1 ON sh1.crn=sec1.crn) AS sh2 ON c1.courseID=sh2.courseID\\n\" +\n    \"WHERE sh2.studentID='?' ORDER BY SUBSTRING(sh2.semYear,2,4) ASC;\",\n\n  deleteCourse:\n    // [ADMIN] Delete a course\n    // USER INPUT: courseID - 5 CHAR (format is 2 letters + 3 numbers, but DB will reject if not correct anyway )\n    \"DELETE FROM course WHERE courseID='?';\",\n\n  // [STUDENT, ADMIN] Drop a Course\n  // USER INPUT: studentID (for Admin), crn\n  // Parameters: studentID-9 digits INT starting with 7, 5 digit CRN\n  dropCourse: \"DELETE FROM enrollment WHERE studentID='?' AND crn='?';\",\n\n  facultyCourseList:\n    \"SELECT list.crn AS 'CRN', list.courseID AS 'Course ID', c.courseName AS 'Course Name', list.roomID As 'Room', \\n\" +\n    \"list.faculty AS 'Instructor', list.semYear as 'Semester', list.Days, list.Time, list.facultyID FROM course c\\n\" +\n    \"JOIN (SELECT s.crn, s.courseID, s.roomID, s.semYear, s.facultyID, CONCAT(u.lastName, ', ', u.firstName) AS 'faculty', \\n\" +\n    \"CONCAT(SUBSTRING(tSlots1.day,1,1),'/',SUBSTRING(tSlots2.day,1,1)) as Days, tSlots2.Time FROM section s\\n\" +\n    \"JOIN user u ON s.facultyID=u.userID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1\\n\" +\n    \"ON s.timeslot1=tSlots1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\" +\n    \"ON s.timeslot2=tSlots2.TSID) AS list ON list.courseID=c.courseID WHERE (list.semYear='F2021' OR list.semYear='S2022') \\n\" +\n    \"ORDER BY list.semYear ASC;\",\n\n    masterScheduleAdd:\n    \"INSERT INTO section(crn, courseID, timeSlot1, timeSlot2, facultyID, roomID, semYear) VALUES ('?', '?','?','?','?','?','?');\",\n\n    masterScheduleRemove:\n    \"DELETE FROM section WHERE crn='?';\",\n\n\n  // [ADMIN] Modify a course\n  // USER INPUT: each variable for SET is optional, if a field is blank it should be removed from the query\n  // Parameters: courseID- 5 CHAR, courseName- String, credits- single digit INT, deptID- 3 CHAR ('D##')\n  modifyCourse:\n    \"UPDATE course\\n\" +\n    \"SET courseID='?', courseName='?', numCredits='?', deptID='?'\\n\" +\n    \"WHERE courseID='?';\",\n\n  // [ADMIN] Modify a user\n  // USER INPUT: each variable for SET is optional, if a field is blank it should be removed from the query\n  // Parameters: first/last - String phoneNumber-10 digits no spaces/dashes, DOB- YYYY-MM-DD, street/city - String, zip-5 digit INT\n  // userID is only for WHERE clause it cannot be modified\n  modifyUser:\n    \"UPDATE user \\n\" +\n    \"SET firstName='?', lastName='?', phoneNumber='?', DOB='?', street='?', city='?', state='?', zip='?'\\n\" +\n    \"WHERE userID='?';\",\n\n  // [STUDENT, ADMIN] Register for a course\n  // USER INPUT: studentID (for Admin), crn\n  // Parameters: studentID-9 digits INT starting with 7, 5 digit CRN\n  registerForCourse:\n    \"INSERT INTO enrollment(studentID, crn, dateEnrolled, grade) VALUES ('?', '?', CURDATE(), 'IP');\",\n\n  // [STUDENT, FACULTY, ADMIN] Query to retrieve student's history*/\n  // USER INPUT: studentID\n  // ADMIN Alternate version - if User input null, remove where clause for entire table\n  studentHistory:\n    \"SELECT instructor.studentID AS 'Student ID', instructor.crn AS 'CRN', instructor.courseID AS 'Course ID', \\n\" +\n    \"instructor.courseName AS 'Course Name', instructor.semYear AS 'Semester', \\n\" +\n    \"CONCAT(u.lastName,', ',u.firstName) AS 'Professor', instructor.grade AS 'Instructor' FROM user u JOIN\\n\" +\n    \"(SELECT f.facultyID, courseHistory.studentID, courseHistory.courseID, courseHistory.courseName, courseHistory.crn, courseHistory.semYear, courseHistory.grade FROM faculty f\\n\" +\n    \"JOIN (SELECT history.studentID, course.courseID, course.courseName, history.crn, history.semYear, history.grade, history.facultyID FROM course\\n\" +\n    \"JOIN (SELECT sh.studentID, sh.crn, s.courseID, sh.semYear, sh.grade, s.facultyID FROM studentHistory sh JOIN \\n\" +\n    \"section s ON sh.crn=s.crn) AS history ON history.courseID=course.courseID) AS courseHistory\\n\" +\n    \"ON courseHistory.facultyID=f.facultyID) AS instructor ON u.userID=instructor.facultyID\\n\" +\n    \"WHERE studentID='?' ORDER BY studentID ASC;\",\n\n  // [ADMIN] Retrieve Student's Login Info\n  // USER INPUT: userID\n  studentLoginInfo:\n    \"SELECT u.userID, u.userType, u.firstName, u.lastName, l.userEmail FROM\\n\" +\n    \"user u RIGHT JOIN loginInfo l ON u.userID=l.userID WHERE u.userID='?';\",\n\n  timeSlotDisplay:\n  \"SELECT timeTable.timeSlotID, timeTable.weekDay AS day, \\n\"+\n  \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\"+\n  \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\"+\n  \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\"+\n  \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable;\",\n\n\n  // [STUDENT, FACULTY, ADMIN] View student transcript\n  // USER INPUT: studentID\n  transcript:\n    \"SELECT SUBSTRING(c1.courseID,1,2) AS 'Subject', SUBSTRING(c1.courseID,3,3) AS 'Course', c1.courseName AS 'Title', sh2.grade AS 'Grade', \\n\" +\n    \"c1.numCredits AS 'Credit Hours', sh2.semYear AS 'Term' FROM course c1\\n\" +\n    \"JOIN (SELECT sh1.studentID, sh1.crn, sh1.semYear, sec1.courseID, sh1.grade FROM studentHistory sh1\\n\" +\n    \"JOIN section sec1 ON sh1.crn=sec1.crn) AS sh2 ON c1.courseID=sh2.courseID\\n\" +\n    \"WHERE sh2.studentID='?' ORDER BY SUBSTRING(sh2.semYear,2,4) ASC;\",\n  /* Amir gave me this algorithm to convert a grade letter into a GPA, which we should display somewhere on the Transcript page:\n    arrayOfGradeLatters= [\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"F\"];\n    arrayOfGradeValues= [4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.0];\n    for(i=0; i< len(grades);i++){\n        gradeindex = array_search(grades[i], arrayOfGradeLatters);\n        gradeadder += floatval($arrayOfGradeValues[$gradeindex]);\n        GPA = floatval(gradeadder/len(grades));\n    } Then you'd return GPA of course */\n\n  // [STUDENT, FACULTY, ADMIN] Query to update password\n  // USER INPUTS: password, userID (for Admin Only)\n  updatePassword: \"UPDATE loginInfo SET password='?' WHERE userID=?;\",\n\n  // [ADMIN] View All User Info\n  viewAllUsers:\n    \"SELECT u.userID, u.userType, u.firstName, u.lastName, u.phoneNumber, u.DOB, u.street, u.city, u.state, u.zip, l.userEmail \\n\" +\n    \"FROM user u JOIN loginInfo l ON u.userID=l.userID;\",\n\n  // [ADMIN] View Course history\n  viewCourseHistory:\n    \"SELECT list.crn AS 'CRN', list.courseID AS 'Course ID', c.courseName AS 'Course Name', list.roomID As 'Room', \\n\" +\n    \"list.faculty AS 'Instructor', list.semYear as 'Semester', list.Days, list.Time FROM course c\\n\" +\n    \"JOIN (SELECT s.crn, s.courseID, s.roomID, s.semYear, s.facultyID, CONCAT(u.lastName, ', ', u.firstName) AS 'faculty', \\n\" +\n    \"CONCAT(SUBSTRING(tSlots1.day,1,1),'/',SUBSTRING(tSlots2.day,1,1)) as Days, tSlots2.Time FROM section s\\n\" +\n    \"JOIN user u ON s.facultyID=u.userID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1\\n\" +\n    \"ON s.timeslot1=tSlots1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\" +\n    \"ON s.timeslot2=tSlots2.TSID) AS list ON list.courseID=c.courseID ORDER BY list.semYear DESC, list.courseID;\",\n\n  // [ADMIN] Retrieve complete list of Faculty who are Advisors\n  viewFacultyAdvisors:\n    \"SELECT adv.facultyID as 'Faculty ID', CONCAT(adv.firstName,' ',adv.lastName) AS 'Advisor Name', adv.phoneNumber AS 'Advisor Phone', l.userEmail AS 'Advisor Email' FROM loginInfo l\\n\" +\n    \"RIGHT JOIN (SELECT facID.facultyID, u.firstName, u.lastName, u.phoneNumber FROM user u JOIN\\n\" +\n    \"(SELECT facultyID FROM advisor) AS facID WHERE facID.facultyID=u.userID) AS adv ON adv.facultyID=l.userID;\",\n\n  // [STUDENT, FACULTY, ADMIN] Query to retireve a student's holds*/\n  // USER INPUT: studentID (for Faculty, Admin)\n  // ADMIN Alternate version - if User input null, remove where clause for entire table\n  viewHolds:\n    \"SELECT sHolds.studentID AS 'Student ID', sHolds.studentName AS 'Student Name', \\n\" +\n    \"h.holdDesc AS 'Description', h.holdType AS 'Type of Hold', sHolds.dateAdded AS 'Date Applied' FROM hold h\\n\" +\n    \"JOIN (SELECT sh.holdName, sh.DateAdded, studentInfo.studentID, studentInfo.studentName FROM studentHold sh\\n\" +\n    \"JOIN (SELECT s.studentID, CONCAT(u.lastName,', ',u.firstName) AS studentName FROM user u\\n\" +\n    \"JOIN student s ON u.userID=s.studentID) AS studentInfo ON studentInfo.studentID=sh.studentID) AS sHolds\\n\" +\n    \"ON h.holdName=sHolds.holdName WHERE sHolds.studentID='?';\",\n\n  // [STUDENT, FACULTY, ADMIN] View Student's registration for next semester*/\n  // USER INPUT: studentID (for Faculty, Admin)\n  // ADMIN Alternate version - if User input null, remove where clause for entire table\n  viewRegistration:\n    \"SELECT courseHist.*, e.grade AS 'Current Grade', DATE_FORMAT(e.dateEnrolled, '%m/%d/%Y') AS 'Date Enrolled' FROM enrollment e \\n\" +\n    \"JOIN (SELECT list.crn AS 'CRN', list.courseID AS 'Course ID', c.courseName AS 'Course Name', list.roomID As 'Room',  \\n\" +\n    \"list.faculty AS 'Instructor', list.semYear as 'Semester', list.Days, list.Time FROM course c\\n\" +\n    \"JOIN (SELECT s.crn, s.courseID, s.roomID, s.semYear, s.facultyID, CONCAT(u.lastName, ', ', u.firstName) AS 'faculty', \\n\" +\n    \"CONCAT(SUBSTRING(tSlots1.day,1,1),'/',SUBSTRING(tSlots2.day,1,1)) as Days, tSlots2.Time FROM section s\\n\" +\n    \"JOIN user u ON s.facultyID=u.userID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID JOIN day d ON tsd.dayID=d.dayID\\n\" +\n    \"JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1 ON s.timeslot1=tSlots1.TSID JOIN\\n\" +\n    \"(SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day,\\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID\tJOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\" +\n    \"ON s.timeslot2=tSlots2.TSID) AS list ON list.courseID=c.courseID ORDER BY list.semYear DESC, list.courseID) AS courseHist\\n\" +\n    \"ON e.crn=courseHist.crn WHERE courseHist.Semester='S2022' AND studentID='700217149';\",\n\n  // [ADMIN] Retrieve complete list of students who have an advisor\n  viewStudentAdvisees:\n    \"SELECT students.studentID AS 'Student ID', CONCAT(students.LastName,', ',students.firstName) AS 'Student Name',\\n\" +\n    \"students.phoneNumber AS 'Student Phone', l.userEmail AS 'Student Email' FROM loginInfo l\\n\" +\n    \"RIGHT JOIN (SELECT facList.studentID, u.firstName, u.lastName, u.phoneNumber FROM user u\\n\" +\n    \"JOIN (SELECT studentID FROM advisor) AS facList WHERE facList.studentID=u.userID) AS students\\n\" +\n    \"ON students.studentID=l.userID ORDER BY students.lastName ASC;\",\n\n  // [FACULTY, ADMIN] Access a Student's schedule\n  // USER INPUT: studentID\n  viewStudentSchedule:\n    \"SELECT final.Student, final.studentID As 'StudentID', final.crn AS 'CRN', final.courseID AS 'Course ID',\\n\" +\n    \"final.courseName AS 'Course Name', final.roomID AS 'Room', final.Instructor, final.semYear AS 'Semester', final.Days, final.Time FROM \\n\" +\n    \"(SELECT CONCAT(u2.lastName,', ',u2.firstName) AS 'Student', studentSet.* FROM user u2 JOIN\\n\" +\n    \"(SELECT e.studentID, facultySet.* FROM enrollment e JOIN\\n\" +\n    \"(SELECT CONCAT(u.lastName,', ',u.firstName) AS 'Instructor', courseSet.* FROM user u JOIN\\n\" +\n    \"(SELECT c.courseName, timeset.* FROM course c JOIN \\n\" +\n    \"(SELECT s.crn, s.courseID, s.facultyID, s.roomID, s.semYear, CONCAT(SUBSTRING(tSlots1.Day,1,1),\\n\" +\n    \"'/',SUBSTRING(tSlots2.Day,1,1)) AS Days, tSlots1.Time FROM section s JOIN\\n\" +\n    \"(SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1\\n\" +\n    \"ON s.timeslot1=tSlots1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\" +\n    \"ON s.timeslot2=tSlots2.TSID) AS timeset ON c.courseID=timeset.courseID) AS courseSet\\n\" +\n    \"ON u.userID=courseSet.facultyID) AS facultySet ON e.crn=facultySet.crn) AS studentSet\\n\" +\n    \"ON studentSet.studentID=u2.userID) AS final WHERE final.studentID=?;\",\n};\n","const queries = require(\"../../queries/FacultyQueries\");\n\nfunction Faculty() {\n  let permissibleQueries = {};\n\n  // assign queries to constants using obj deconstruction\n  const {\n    getStudentHistory,\n    getStudentHolds,\n    getListOfStudentsFacultyIsAdvising,\n  } = queries;\n  // console.log(getStudentHistory);\n\n  // define new key/val pairs in permissibleQueries for\n  // easy access\n\n  permissibleQueries.getStudentHistory = getStudentHistory;\n  permissibleQueries.getStudentHolds = getStudentHolds;\n  permissibleQueries.getListOfStudentsFacultyIsAdvising =\n    getListOfStudentsFacultyIsAdvising;\n\n  // a little unsightly and there's probably a better way\n  // but like always i'm making it work!\n  return permissibleQueries;\n}\n\nmodule.exports.Faculty = Faculty();\n","module.exports = {\n\n    // [STUDENT, FACULTY, ADMIN] Course Search Query\n    // USER INPUT: Multiple field inputs possible, WHERE clause in last line get \n    // replaced depending on field, can be more than one by using AND\n    // VARIABLE VALUES:\n    // finalList.crn = '?';\n    // finalList.courseID LIKE '%?%';\n    // finalList.courseName LIKE '%?%'; (percent symbols are wildcards, this returns anything containing whats between them\n    // finalList.Instructor LIKE '%?%'; */\n    courseSearch:\n    \"SELECT finalList.crn AS 'CRN', finalList.courseID AS 'Course ID', finalList.courseName AS 'Course Name', finalList.roomID AS 'Room', \\n\" +\n    \"finalList.Instructor, finalList.Days, finalList.Time, finalList.semYear AS 'Semester' FROM\\n\" +\n    \"(SELECT courseList.*, times1.TSID, CONCAT (substring(times1.day,1,1),'/',substring(times2.day,1,1)) AS 'Days', times1.Time FROM\\n\" +\n    \"(SELECT S2022.crn, S2022.courseID, S2022.courseName, S2022.roomID,\\n\" +\n    \"CONCAT (u.firstName, ', ', u.lastName) as 'Instructor', S2022.semYear, S2022.timeSlot1, S2022.timeSlot2 FROM user u\\n\" +\n    \"RIGHT JOIN (SELECT s.crn, s.courseID, catalog.courseName, catalog.deptName, s.roomID, s.facultyID, s.semYear, s.timeSlot1, s.timeSlot2 from section s\\n\" +\n    \"RIGHT JOIN (SELECT d.deptID, d.deptName, c.courseID, c.courseName FROM dept d\\n\" +\n    \"JOIN course c ON d.deptID=c.deptID) AS catalog ON s.courseID=catalog.courseID\\n\" +\n    \"WHERE s.semYear='S2022') AS S2022 ON u.userID=S2022.facultyID) AS courseList\\n\" +\n    \"LEFT JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as times1\\n\" +\n    \"ON courseList.timeSlot1=times1.TSID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\" +\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\" +\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\" +\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\" +\n    \"JOIN day d ON tsd.dayID=d.dayID JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as times2\\n\" +\n    \"ON courseList.timeslot2=times2.TSID) AS finalList WHERE finalList.courseID LIKE '%?%';\",\n\n    // [STUDENT, FACULTY, ADMIN] Degree Audit - Two Part Query, first gets % complete, second gets courses\n    // AUTO-FILL INPUT: studentID for current user\n    degreeAuditPt1:\n    \"SELECT COUNT(*) AS 'Courses Completed', total.total AS 'Courses Needed', \\n\" +\n    \"CONCAT(FORMAT((COUNT(*)/total.total)*100,2),'%') AS 'Percent Complete' FROM studentHistory sh\\n\" +\n    \"JOIN (SELECT sm.studentID, sm.majorID, COUNT(*) AS 'total' FROM studentMajor sm\\n\" +\n    \"JOIN majorCourse mc ON sm.majorID=mc.majorID\\n\" +\n    \"WHERE sm.studentID='?') AS total\\n\" +\n    \"ON sh.studentID=total.studentID;\",\n\n    degreeAuditPt2:\n    \"SELECT c1.courseID AS 'Course', c1.courseName AS 'Title', sh2.grade AS 'Grade', \\n\" +\n    \"c1.numCredits AS 'Credits', sh2.semYear AS 'Term' FROM course c1\\n\" +\n    \"JOIN (SELECT sh1.studentID, sh1.crn, sh1.semYear, sec1.courseID, sh1.grade FROM studentHistory sh1\\n\" +\n    \"JOIN section sec1 ON sh1.crn=sec1.crn) AS sh2 ON c1.courseID=sh2.courseID\\n\" +\n    \"WHERE sh2.studentID='?' ORDER BY SUBSTRING(sh2.semYear,2,4) ASC;\",\n\n    // [STUDENT, ADMIN] Drop a Course\n    // USER INPUT: crn\n    // AUTO-FILL INPUT: studentID for current user\n    // Parameters: 5 digit CRN\n    dropCourse: \n    \"DELETE FROM enrollment WHERE studentID='?' AND crn='?';\",\n\n    // [STUDENT, ADMIN] Register for a course\n    // USER INPUT: crn\n    // AUTO-FILL INPUT: studentID for current user\n    // Parameters: 5 digit CRN\n    registerForCourse:\n    \"INSERT INTO enrollment(studentID, crn, dateEnrolled, grade) VALUES ('?', '?', CURDATE(), 'IP');\",\n\n    // [STUDENT, FACULTY, ADMIN] Query to retrieve student's history*/\n    // AUTO-FILL INPUT: studentID for current user\n    studentHistory:\n    \"SELECT instructor.studentID AS 'Student ID', instructor.crn AS 'CRN', instructor.courseID AS 'Course ID', \\n\" +\n    \"instructor.courseName AS 'Course Name', instructor.semYear AS 'Semester', \\n\" +\n    \"CONCAT(u.lastName,', ',u.firstName) AS 'Professor', instructor.grade AS 'Instructor' FROM user u JOIN\\n\" +\n    \"(SELECT f.facultyID, courseHistory.studentID, courseHistory.courseID, courseHistory.courseName, courseHistory.crn, courseHistory.semYear, courseHistory.grade FROM faculty f\\n\" +\n    \"JOIN (SELECT history.studentID, course.courseID, course.courseName, history.crn, history.semYear, history.grade, history.facultyID FROM course\\n\" +\n    \"JOIN (SELECT sh.studentID, sh.crn, s.courseID, sh.semYear, sh.grade, s.facultyID FROM studentHistory sh JOIN \\n\" +\n    \"section s ON sh.crn=s.crn) AS history ON history.courseID=course.courseID) AS courseHistory\\n\" +\n    \"ON courseHistory.facultyID=f.facultyID) AS instructor ON u.userID=instructor.facultyID\\n\" +\n    \"WHERE studentID='?' ORDER BY studentID ASC;\",\n\n    // [STUDENT, FACULTY, ADMIN] View student transcript\n    // AUTO-FILL INPUT: studentID for current user\n    transcript:\n    \"SELECT SUBSTRING(c1.courseID,1,2) AS 'Subject', SUBSTRING(c1.courseID,3,3) AS 'Course', c1.courseName AS 'Title', sh2.grade AS 'Grade', \\n\" +\n    \"c1.numCredits AS 'Credit Hours', sh2.semYear AS 'Term' FROM course c1\\n\" +\n    \"JOIN (SELECT sh1.studentID, sh1.crn, sh1.semYear, sec1.courseID, sh1.grade FROM studentHistory sh1\\n\" +\n    \"JOIN section sec1 ON sh1.crn=sec1.crn) AS sh2 ON c1.courseID=sh2.courseID\\n\" +\n    \"WHERE sh2.studentID='?' ORDER BY SUBSTRING(sh2.semYear,2,4) ASC;\",\n    /* Amir gave me this algorithm to convert a grade letter into a GPA, which we should display somewhere on the Transcript page:\n    arrayOfGradeLatters= [\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"F\"];\n    arrayOfGradeValues= [4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.0];\n    for(i=0; i< len(grades);i++){\n        gradeindex = array_search(grades[i], arrayOfGradeLatters);\n        gradeadder += floatval($arrayOfGradeValues[$gradeindex]);\n        GPA = floatval(gradeadder/len(grades));\n    } Then you'd return GPA of course */\n\n    // [STUDENT, FACULTY, ADMIN] Query to update password\n    // USER INPUT: password\n    // AUTO-FILL INPUT: userID for current user\n    updatePassword:\n    \"UPDATE loginInfo SET password='?' WHERE userID='?';\",\n\n    // [STUDENT] View Assigned Faculty Advisor\n    // AUTO-FILL INPUT: studentID for current user\n    viewAdvisor:\n    \"SELECT CONCAT(adv.firstName,' ',adv.lastName) AS 'Advisor Name', adv.phoneNumber AS 'Advisor Phone', l.userEmail AS 'Advisor Email' FROM loginInfo l\\n\" +\n    \"RIGHT JOIN (SELECT facID.facultyID, u.firstName, u.lastName, u.phoneNumber FROM user u JOIN\\n\" +\n    \"(SELECT facultyID FROM advisor WHERE studentID='?') AS facID WHERE facID.facultyID=u.userID) AS adv\\n\" +\n    \"ON adv.facultyID=l.userID;\",\n\n    // [STUDENT, FACULTY, ADMIN] Query to retireve a student's holds*/\n    // AUTO-FILL INPUT: studentID for current user\n    viewHolds:\n    \"SELECT sHolds.studentID AS 'Student ID', sHolds.studentName AS 'Student Name', \\n\" +\n    \"h.holdDesc AS 'Description', h.holdType AS 'Type of Hold', DATE_FORMAT(sHolds.dateAdded, '%m/%d/%Y') AS 'Date Added' FROM hold h \\n\" +\n    \"JOIN (SELECT sh.holdName, sh.DateAdded, studentInfo.studentID, studentInfo.studentName FROM studentHold sh\\n\" +\n    \"JOIN (SELECT s.studentID, CONCAT(u.lastName,', ',u.firstName) AS studentName FROM user u\\n\" +\n    \"JOIN student s ON u.userID=s.studentID) AS studentInfo ON studentInfo.studentID=sh.studentID) AS sHolds\\n\" +\n    \"ON h.holdName=sHolds.holdName WHERE sHolds.studentID='?';\",\n\n    // [STUDENT, FACULTY, ADMIN] View Student's registration for next semester*/\n    // AUTO-FILL INPUT: studentID for current user\n    viewRegistration:\n    \"SELECT courseHist.*, e.grade AS 'Current Grade', DATE_FORMAT(e.dateEnrolled, '%m/%d/%Y') AS 'Date Enrolled' FROM enrollment e \\n\"+\n    \"JOIN (SELECT list.crn AS 'CRN', list.courseID AS 'Course ID', c.courseName AS 'Course Name', list.roomID As 'Room',  \\n\"+\n    \"list.faculty AS 'Instructor', list.semYear as 'Semester', list.Days, list.Time FROM course c\\n\"+\n    \"JOIN (SELECT s.crn, s.courseID, s.roomID, s.semYear, s.facultyID, CONCAT(u.lastName, ', ', u.firstName) AS 'faculty', \\n\"+\n    \"CONCAT(SUBSTRING(tSlots1.day,1,1),'/',SUBSTRING(tSlots2.day,1,1)) as Days, tSlots2.Time FROM section s\\n\"+\n    \"JOIN user u ON s.facultyID=u.userID JOIN (SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day, \\n\"+\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\"+\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\"+\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID JOIN day d ON tsd.dayID=d.dayID\\n\"+\n    \"JOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots1 ON s.timeslot1=tSlots1.TSID JOIN\\n\"+\n    \"(SELECT timeTable.timeSlotID AS 'TSID', timeTable.weekDay AS day,\\n\"+\n    \"CONCAT(TIME_FORMAT(timeTable.periodStart, '%h:%i%p'),' - ',TIME_FORMAT(timeTable.periodEnd, '%h:%i%p')) AS 'Time' FROM\\n\"+\n    \"(SELECT ts.timeSlotID, ts.dayID, ts.periodID, d.weekday, p.periodStart, p.periodEnd FROM timeSlot ts\\n\"+\n    \"JOIN tsDay tsd ON ts.timeSlotID=tsd.timeSlotID JOIN tsPeriod tsp ON ts.timeslotID=tsp.timeSlotID\\n\"+\n    \"JOIN day d ON tsd.dayID=d.dayID\tJOIN period p ON tsp.periodID=p.periodID) AS timeTable) as tSlots2\\n\"+\n    \"ON s.timeslot2=tSlots2.TSID) AS list ON list.courseID=c.courseID ORDER BY list.semYear DESC, list.courseID) AS courseHist\\n\"+\n    \"ON e.crn=courseHist.crn WHERE courseHist.Semester='S2022' AND studentID='?';\",\n\n    // [STUDENT] Retreive student's user info\n    // AUTO-FILL INPUT: userID for current user\n    // This is the query that should be used to display info on the STUDENT landing page\n    viewStudentLoginInfo:\n    \"SELECT u.userID, u.userType, u.firstName, u.lastName, l.userEmail, l.password FROM\\n\" +\n    \"user u RIGHT JOIN loginInfo l ON u.userID=l.userID WHERE u.userID='?';\",\n    \n}","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass DynamicForms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { fields: [] };\n  }\n\n  makeFields = (fields) => {\n    let eles = [];\n    let col = 12 % fields.length; // modulo actually coming in handy\n    // dynamically create column length based on amt. fields\n    let colString = col.toString();\n    colString = \"form-group \" + colString;\n    fields.map((ele, index) => {\n      if (fields.length % 2 == 0) {\n        eles.push(\n          <input\n            id={fields[index]}\n            onChange={(e) => {\n              fields[index] = e.target.value;\n              console.log(fields[index]);\n            }}\n            placeholder={fields[index]}\n          ></input>\n        );\n      } else {\n        <input\n          id={fields[index]}\n          onChange={(e) => {\n            fields[index] = e.target.value;\n            console.log(fields[index]);\n          }}\n          placeholder={fields[index]}\n        ></input>;\n      }\n    });\n\n    return eles;\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid\" id=\"loginFormContainer\" max-height=\"80%\">\n        <form>{this.makeFields(this.props.fields)}</form>\n      </div>\n    );\n  }\n}\n\nexport default DynamicForms;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass FormTemplate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n  }\n\n  process = (array) => {\n    let temp = [];\n    array.map((ele) => {\n      // Check to see if temp data has a key == array ele'\n      // Push tempData key value to an array\n      // Push ele, since that's the name of the key\n      // Keys are simply properties we will use when making the forms\n\n      temp.push(ele);\n      console.log(\"Found a match\");\n      // these are the keys\n    });\n\n    return temp;\n  };\n\n  make = (array) => {\n    let eles = [];\n    for (let i = 0; i < array.length; i++) {\n      console.log(\"Making element\");\n      eles.push(\n        <div className=\"col-2\">\n          <input\n            id={array[i]}\n            type=\"text\"\n            className=\"form-control\"\n            placeholder={array[i]}\n            onChange={(e) => {\n              this.props.tempData[array[i]] = e.target.value;\n              this.props.updateParams(array[i], e.target.value); // where array[i] is the current key, and the value is what we'll overwrite the parent state with\n              // submit doesn't seem necessary, can use it to bubble up an execute query function, and then use the query in the parent!\n              // query method will be a property of the objects describing the navbar\n              console.log(this.props.tempData[array[i]]);\n            }}\n          />\n        </div>\n      );\n    }\n    console.log(\"Check to see if forms were made.\");\n    return eles;\n  };\n\n  clear = () => {\n    ReactDOM.render(<div></div>, document.getElementById(\"test2\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"test3\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"test4\"));\n  };\n  render() {\n    // The properties used of the forms for that particular button (such as crn, userID etc.)\n\n    let temp = this.process(this.props.fields);\n    let eles = this.make(temp);\n    return (\n      <div\n        className=\"container-fluid\"\n        id=\"loginFormContainer\"\n        max-height=\"80%\"\n        style={{ justifyContent: \"center\" }}\n      >\n        <form id=\"form2\">\n          <div className=\"row\">\n            {eles}{\" \"}\n            <div className=\"col-2\">\n              <button\n                type=\"submit\"\n                // 'margin-bottom: 5px;display:  inline-block;position: relative;bottom: 5px;'\n                style={{\n                  marginBottom: \"5px\",\n                  display: \"inline-block\",\n                  position: \"relative\",\n                  bottom: \"5px\",\n                }}\n                className=\"btn btn-primary mt-2\"\n                onClick={(e) => {\n                  e.preventDefault();\n\n                  this.props.updateParams();\n                  this.props.relevantQuery();\n                  // this.props.onAllFormsSubmit(user, pass, userType);\n                }}\n              >\n                Submit\n              </button>\n              <button\n                // 'margin-bottom: 5px;display:  inline-block;position: relative;bottom: 5px;'\n                style={{\n                  marginBottom: \"5px\",\n                  display: \"inline-block\",\n                  position: \"relative\",\n                  bottom: \"5px\",\n                }}\n                className=\"btn btn-secondary mt-2\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  this.clear();\n                  // this.props.onAllFormsSubmit(user, pass, userType);\n                }}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default FormTemplate;\n","import React, { Component } from \"react\";\nimport \"../styles/NavigationStyles.css\";\nimport DynamicForms from \"./DynamicForms\";\nimport ReactDOM from \"react-dom\";\nimport FormTemplate from \"./FormTemplate\";\n\nclass NavBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chosenUserTypeNavEleArray: [],\n      curEle: \"\",\n      // This is where we'll store the user inputs sent from FormTemplate!\n      reqBodyObj: {},\n      tempData: {\n        // for custom inputs\n        userID: \"\",\n        Instructor: \"\",\n        crn: \"\",\n        courseID: \"\",\n        courseName: \"\",\n        numCredits: \"\",\n        deptID: \"\",\n        userType: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        phoneNum: \"\",\n        DOB: \"\",\n        street: \"\",\n        studentID: \"\",\n        email: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n      },\n      userID: \"542\",\n      // Commenting out the old onClicks because the query methods can be helpful later\n      Admin: [\n        {\n          name: \"Home\",\n          onClick: () =>\n            console.log(\"Pressed home button. Add a redirect somewhere maybe?\"),\n        },\n\n        /*\n        {\n          name: \"Admin Login Info\",\n          onClick: () => {\n            this.props.adminLoginInfo();\n            //this.props.facultyLoginInfo\n          },\n        },\n\n        {\n          name: \"Test Login\",\n          onClick: () => {\n            this.makeForm([\"userEmail\", \"password\"], this.props.testLogin);\n          },\n        },\n        */\n        {\n          name: \"Create Course\",\n          onClick: () => {\n            this.makeForm(\n              [\"courseID\", \"courseName\", \"numCredits\", \"deptID\"],\n              this.props.createCourse\n            );\n          },\n        },\n\n        {\n          name: \"Search Course\",\n          onClick: () => {\n            this.makeForm(\n              // [\"crn\", \"courseID\", \"courseName\", \"Instructor\"],\n              [\"crn\", \"courseID\", \"courseName\", \"Instructor\"],\n              this.props.courseSearch\n            );\n          },\n        },\n        {\n          name: \"Create User\",\n          onClick: () =>\n            this.makeForm(\n              [\n                \"userID\",\n                \"userType\",\n                \"firstName\",\n                \"lastName\",\n                \"phoneNumber\",\n                \"DOB\",\n                \"street\",\n                \"city\",\n                \"state\",\n                \"zip\",\n              ],\n              this.props.createUser\n            ),\n        },\n        {\n          name: \"Delete Course\",\n          onClick: () => this.makeForm([\"courseID\"], this.props.deleteCourse),\n        },\n\n        {\n          name: \"Drop Course\",\n          onClick: () => {\n            this.makeForm([\"studentID\", \"crn\"], this.props.dropStudentCourse);\n          },\n        },\n\n        {\n          name: \"Modify Course\",\n          onClick: () =>\n            this.makeForm(\n              [\"courseID\", \"courseName\", \"numCredits\", \"deptID\"],\n              this.props.modifyCourse\n            ),\n        },\n\n        {\n          name: \"Modify User\",\n          onClick: () =>\n            this.makeForm(\n              [\n                \"firstName\",\n                \"lastName\",\n                \"phoneNumber\",\n                \"DOB\",\n                \"street\",\n                \"city\",\n                \"state\",\n                \"zip\",\n                \"userID\",\n              ],\n              this.props.modifyUser\n            ),\n        },\n\n        {\n          name: \"Register Student for Course\",\n          onClick: () =>\n            this.makeForm(\n              [\"studentID\", \"crn\"],\n              this.props.registerStudentForCourse\n            ),\n        },\n\n        {\n          name: \"Get Transcript\",\n          onClick: () => this.makeForm([\"studentID\"], this.props.getTranscript),\n        },\n\n        {\n          name: \"Update Password\",\n          onClick: () =>\n            this.makeForm([\"password\", \"userID\"], this.props.updatePassword),\n        },\n\n        { name: \"View All Users\", onClick: () => this.props.viewAllUsers() },\n\n        //onClick: this.props.viewCourseHistory },\n        {\n          name: \"View Student Advisees\",\n          onClick: () => this.props.viewStudentAdvisees(),\n        },\n\n        {\n          name: \"View Faculty Advisors\",\n          onClick: () => this.props.viewFacultyAdvisors(),\n        },\n\n        /*\n        {\n          name: \"View Faculty Course List\",\n          onClick: () =>\n            this.makeForm([\"facultyID\"], this.props.facultyCourseList),\n        },\n        */\n        {\n          name: \"View Student Course History\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.studentHistory),\n        },\n        {\n          name: \"View Student Degree Audit\",\n          onClick: () => {\n            this.makeForm([\"studentID\"], this.props.degreeAudit);\n          },\n        },\n\n        {\n          name: \"View Student Holds\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.viewStudentHolds),\n        },\n\n        {\n          name: \"View Student Registration\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.viewRegistration),\n        },\n\n        {\n          name: \"View Student Schedule\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.viewStudentSchedule),\n        },\n\n        {\n          name: \"View Student Transcript\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.viewStudentTranscript),\n        },\n        /*\n        {\n          name: \"View User Login Info\",\n          onClick: () => this.makeForm([\"userID\"], this.props.studentLoginInfo),\n        }, */\n      ],\n\n      Student: [\n        {\n          name: \"Home\",\n          onClick: \"#\",\n        },\n\n        {\n          name: \"Faculty Login Info\",\n          onClick: () => {\n            //this.props.facultyLoginInfo\n          },\n        },\n\n        {\n          name: \"Course Search\",\n          onClick: () => this.makeForm([\"courseID\"], this.props.courseSearch),\n        },\n\n        {\n          name: \"Drop Course\", //This one auto-fills student and password is an input field\n          onClick: () => {\n            //this.props.studentID,\n            this.makeForm([\"studentID\", \"crn\"], this.props.dropCourse);\n          },\n        },\n\n        {\n          name: \"Degree Audit\",\n          onClick: () => {\n            // this.makeForm([\"studentID\"], this.props.degreeAudit);\n          },\n        },\n\n        {\n          name: \"Register for Course\",\n          onClick: () =>\n            this.makeForm([\"studentID\", \"crn\"], this.props.registerForCourse),\n        },\n\n        {\n          name: \"Student History\",\n          onClick: () => this.props.studentHistory(),\n        },\n\n        {\n          name: \"Student Login Info\",\n          onClick: () => this.props.studentLoginInfo(),\n        },\n\n        {\n          name: \"Unofficial Transcript\",\n          onClick: () => this.props.transcript(),\n        },\n\n        {\n          name: \"Update Password\",\n          onClick: () =>\n            this.makeForm([\"password\", \"userID\"], this.props.updatePassword),\n        },\n\n        {\n          name: \"View Advisor\",\n          onClick: () => this.props.viewAdvisor(),\n        },\n\n        {\n          name: \"View Holds\",\n          onClick: () => this.props.viewHolds(),\n        },\n        {\n          name: \"View Registration\",\n          onClick: () => this.props.viewRegistration(),\n        },\n\n        {\n          name: \"Logout\",\n          onClick: \"#\",\n        }, // some arbitrary location atm\n      ],\n\n      Faculty: [\n        {\n          name: \"Home\",\n          onClick: \"#\",\n        },\n\n        {\n          name: \"Assigned Course List\",\n          onClick: () => {\n            this.props.assignedCourseList();\n          },\n        },\n\n        {\n          name: \"Course Search\",\n          onClick: () => {\n            this.makeForm(\n              // [\"crn\", \"courseID\", \"courseName\", \"Instructor\"],\n              [\"crn\", \"courseID\", \"courseName\", \"Instructor\"],\n              this.props.courseSearch\n            );\n          },\n        },\n\n        {\n          name: \"Degree Audit\",\n          onClick: () => this.makeForm([\"studentID\"], this.props.degreeAudit),\n        },\n\n        {\n          name: \"Faculty Login Info\",\n          onClick: () => this.props.facultyLoginInfo(),\n        },\n\n        {\n          name: \"Record Attendance\",\n          onClick: () =>\n            this.makeForm(\n              [\"studentID\", \"crn\", \"isPresent\", \"date\"],\n              this.props.recordAttendance\n            ),\n        },\n\n        {\n          name: \"Student History\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.studentHistory),\n        },\n\n        {\n          name: \"Unofficial Transcript\",\n          onClick: () => this.makeForm([\"studentID\"], this.props.transcript),\n        },\n\n        {\n          name: \"Update Password\", //AUTO FILL facultyID, user input password\n          onClick: () => this.makeForm([\"password\"], this.props.updatePassword),\n        },\n        {\n          name: \"View Advisees\",\n          onClick: () => this.props.viewStudentAdvisees(),\n        },\n        {\n          name: \"View Holds\",\n          onClick: () => this.makeForm([\"studentID\"], this.props.viewHolds),\n        },\n\n        {\n          name: \"View Registration\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.viewRegistration),\n        },\n\n        {\n          name: \"View Student Schedule\",\n          onClick: () =>\n            this.makeForm([\"studentID\"], this.props.viewStudentSchedule),\n        },\n\n        {\n          name: \"Logout\",\n          onClick: \"./Logout\",\n        }, // some arbitrary location atm\n      ],\n\n      /* Will do research staff at a later time\n      ResearchStaff: [\n        {name: \"Home\", onClick: \"#\"},\n\n      ] */\n    };\n\n    // I put this underneath the code above simply because I'm not sure if\n    // it would affect compile-time, since the state variables would not yet\n    // be declared at that point\n  }\n\n  // Generate the Form Template\n  // Need to get this to take the fields of whatever the button takes\n  makeForm = (fields, query) => {\n    let arr = [];\n    fields.map((ele) => {\n      console.log(ele);\n    });\n\n    arr = fields;\n    let ele = (\n      <div className=\"main\" style={{ justifyContent: \"center\" }}>\n        <FormTemplate\n          fields={arr}\n          tempData={this.state.tempData}\n          updateParams={this.doHandleUpdateParams}\n          relevantQuery={query} // where query is a function reference\n        ></FormTemplate>\n      </div>\n    );\n\n    ReactDOM.render(ele, document.getElementById(\"forms\"));\n  };\n\n  wrapper = (func, val) => {\n    ReactDOM.render(\n      <div>\n        <DynamicForms fields={[\"crigne\"]}></DynamicForms>\n      </div>,\n      document.getElementById(\"root\")\n    );\n  };\n\n  doHandleUpdateParams = (key, value) => {\n    console.log(key);\n    this.setState({ key, key: value });\n    console.log(\"NAVBAR: Changed state of relevant key: \", key);\n    console.log(\n      \"Temp Data \",\n      key,\n      \" within NavBar is now set to \",\n      value,\n      \"!\",\n      \" Now attempting to bubble up to Query Handler...\"\n    );\n\n    this.props.updateParams(key, value);\n  };\n\n  render() {\n    let arr = [];\n    switch (this.props.userType) {\n      case \"Admin\":\n        arr = this.state.Admin;\n        console.log(\"Matched admin\");\n        break;\n      case \"Faculty\":\n        arr = this.state.Faculty;\n        console.log(\"Matched faculty\");\n        break;\n      //  case \"Research Staff\": // Holding off on research staff for now\n      // this.setState({chosenUserTypeNavEleArray}) = this.state.ResearchStaff;\n      case \"Student\":\n        arr = this.state.Student;\n        console.log(\"Chose student\");\n\n        break;\n    }\n\n    // let names = this.props.sideBarOptions.eles;\n    // console.log(names);\n    // Grab the ele array, spit out some buttons\n\n    let eles = arr.map((element) => {\n      return (\n        <div>\n          <a\n            class=\"nav-link\"\n            id=\"barBody\"\n            //data-toggle=\"pill\"\n            href=\"#v-pills-home\"\n            role=\"tabpanel\"\n            onClick={element.onClick}\n          >\n            {element[\"name\"]}\n          </a>\n        </div>\n      );\n    });\n    //aria-controls=\"v-pills-home\" //aria-selected=\"true\"\n    return (\n      <div className=\"Sidebar\">\n        <div\n          className=\"container\"\n          id=\"row\"\n          role=\"tablist\"\n          aria-orientation=\"vertical\"\n        >\n          <nav class=\"menu\">{eles}</nav>\n        </div>\n      </div>\n    );\n    // set height of parent to certain amount of pixels ex 100px\n    // children set max-width to 100%, which will just mean 100px maximum\n    // since that's the parent width\n  }\n}\n\nexport default NavBar;\n\n// will make an array of items and then map them to buttons\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass Login extends Component {\n  state = {\n    credentials: {\n      user: \"\",\n      pass: \"\",\n      userType: \"\",\n      auth: \"\",\n    },\n  };\n\n  constructor() {\n    super();\n    let populateFields = this.populateFields.bind(this);\n    this.populateFields = populateFields;\n  }\n\n  populateFields = (type) => {\n    let userEmail;\n    let pass;\n    let userType;\n    switch (type) {\n      case \"Admin\": {\n        userEmail = \"mguyanb6@neweastbury.edu\";\n        pass = \"6RtZQZWl38TO\";\n        userType = type;\n        break;\n      }\n      case \"Faculty\": {\n        userEmail = \"sgoldwater5a@neweastbury.edu\";\n        pass = \"sbzd\";\n        userType = type;\n        break;\n      }\n      case \"ResearchStaff\": {\n        userEmail = \"mrapperbd@neweastbury.edu\";\n        pass = \"ooKCSHmUO\";\n        userType = type;\n        break;\n      }\n      case \"Student\": {\n        userEmail = \"smashamlw@neweastbury.edu\";\n        pass = \"jSNHlqbS\";\n        userType = type;\n        break;\n      }\n    }\n\n    let credentials = {\n      user: userEmail,\n      pass: pass,\n      userType: type,\n    };\n\n    this.setState({ credentials });\n    console.log(this.state.credentials);\n  };\n\n  update = () => {};\n\n  makeFields = () => {\n    let fields = [\"userID\", \"firstName\"];\n    let eles = [];\n    fields.map((ele, index) => {\n      eles.push(\n        <div className=\"col-3\">\n          <input\n            id={fields[index]}\n            onChange={(e) => {\n              fields[index] = e.target.value;\n              console.log(fields[index]);\n            }}\n            placeholder={fields[index]}\n          ></input>\n        </div>\n      );\n    });\n\n    // ReactDOM.render(eles, document.getElementById(\"NavBar\"));\n  };\n\n  render() {\n    var { user, pass, userType } = this.state.credentials;\n\n    return (\n      <div className=\"container-fluid\" id=\"loginFormContainer\" max-height=\"80%\">\n        <button onClick={() => this.populateFields(\"Admin\")}>\n          Auto Populate ADMIN\n        </button>\n        <button onClick={() => this.populateFields(\"Faculty\")}>\n          Auto Populate FACULTY\n        </button>\n        <button onClick={() => this.populateFields(\"ResearchStaff\")}>\n          Auto Populate RESEARCH STAFF\n        </button>\n\n        <button onClick={() => this.populateFields(\"Student\")}>\n          Auto Populate STUDENT\n        </button>\n        <form>\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <input\n                id=\"email\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"E-mail\"\n                onChange={(e) => {\n                  user = e.target.value;\n                  console.log(user);\n                }}\n              />\n            </div>\n            {this.makeFields()}\n            <div className=\"col-3\">\n              <input\n                id=\"password\"\n                type=\"password\"\n                className=\"form-control\"\n                placeholder=\"Password\"\n                onChange={(e) => {\n                  pass = e.target.value;\n                  console.log(\"Changing\", pass);\n                }}\n              />\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"form-group col-3\">\n              <label for=\"inputState\"></label>\n              <select\n                id=\"inputState\"\n                onChange={(e) => {\n                  userType = e.target.value;\n                }}\n                className=\"form-control\"\n                defaultValue={\"Choose User Type\"}\n              >\n                <option>Choose User Type</option>\n                <option value=\"Student\">Student</option>\n                <option value=\"Admin\">Admin</option>\n                <option value=\"Faculty\">Faculty</option>\n                <option value=\"ResearchStaff\">Research Staff</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary mt-3\"\n                onClick={(e) => {\n                  e.preventDefault();\n\n                  this.props.onLoginSubmit(user, pass, userType);\n                }}\n              >\n                Sign in\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import Axios from \"axios\";\nimport makeSomeTables from \"../MakeTable.jsx\";\nimport MakeTable from \"../MakeTable.jsx\";\nconst storage = require(\"node-persist\"); // storing thes ession data\n\nexport default function postRequest(args) {\n  let _path = \"http://localhost:3305\".concat(args.path);\n  let keys = Object.keys(args);\n  let kappa = \"\";\n  keys.map((ele) => {\n    kappa = ele;\n  });\n\n  Axios.post(_path, {\n    args: args,\n  }).then((response) => {\n    console.log(response);\n    //  let data = makeSomeTables(response);\n\n    if (response.data.validated) {\n      console.log(\"gottem\");\n    } else {\n      console.log(\"fail\");\n    }\n  });\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nclass AllForms extends Component {\n  state = {\n    credentials: {\n      user: \"\",\n      pass: \"\",\n      userType: \"\",\n      auth: \"\",\n    },\n    tempData: {\n      // for custom inputs\n      userID: \"\",\n      courseID: \"\",\n      crn: \"\",\n      courseName: \"\",\n      numCredits: \"\",\n      deptID: \"\",\n      userType: \"\",\n      firstName: \"\",\n      Instructor: \"\",\n      lastName: \"\",\n      phoneNum: \"\",\n      DOB: \"\",\n      street: \"\",\n      studentID: \"\",\n      email: \"\",\n      city: \"\",\n      state: \"\",\n      zip: \"\",\n    },\n  };\n\n  constructor() {\n    super();\n    let populateFields = this.populateFields.bind(this);\n    this.populateFields = populateFields;\n    let temp = this.showFields.bind(this);\n    this.showFields = temp;\n    temp = this.hideFields.bind(this);\n    this.hideFields = temp;\n  }\n\n  populateFields = (type) => {};\n  clearFields = (which) => {\n    if (which == 1) document.getElementById(\"form1\").reset();\n    if (which == 2) {\n      document.getElementById(\"form2\").reset();\n    }\n  };\n  showFields = () => {\n    let {\n      userID,\n      courseID,\n      courseName,\n      numCredits,\n      crn,\n      deptID,\n\n      userType,\n      firstName,\n      lastName,\n      phoneNum,\n      DOB,\n      street,\n      studentID,\n      email,\n      city,\n      state,\n      zip,\n      Instructor,\n    } = this.state.tempData;\n\n    let button = (\n      <div className=\"container-fluid\" id=\"loginFormContainer\" max-height=\"80%\">\n        <button onClick={this.hideFields}>Hide</button>\n        <form id=\"form2\">\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <input\n                id=\"userID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"userID\"\n                onChange={(e) => {\n                  userID = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"studentID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"studentID\"\n                onChange={(e) => {\n                  studentID = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"email\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"email\"\n                onChange={(e) => {\n                  email = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"courseID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"courseID\"\n                onChange={(e) => {\n                  courseID = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"firstName\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"firstName\"\n                onChange={(e) => {\n                  firstName = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"lastName\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"lastName\"\n                onChange={(e) => {\n                  lastName = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"phoneNum\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"phoneNum\"\n                onChange={(e) => {\n                  phoneNum = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"password\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"street\"\n                onChange={(e) => {\n                  DOB = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"street\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"street\"\n                onChange={(e) => {\n                  street = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"city\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"city\"\n                onChange={(e) => {\n                  city = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"state\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"state\"\n                onChange={(e) => {\n                  state = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"zip\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"zip\"\n                onChange={(e) => {\n                  zip = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"courseID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"courseID\"\n                onChange={(e) => {\n                  courseID = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"courseName\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"courseName\"\n                onChange={(e) => {\n                  courseName = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"numCredits\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"numCredits\"\n                onChange={(e) => {\n                  numCredits = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"crn\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"crn\"\n                onChange={(e) => {\n                  crn = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"deptID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"deptID\"\n                onChange={(e) => {\n                  deptID = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"Instructor\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Instructor\"\n                onChange={(e) => {\n                  Instructor = e.target.value;\n                }}\n              />\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"form-group col-3\">\n              <label for=\"inputState\"></label>\n              <select\n                id=\"inputState\"\n                onChange={(e) => {\n                  userType = e.target.value;\n                }}\n                className=\"form-control\"\n                defaultValue={\"Choose User Type\"}\n              >\n                <option>Choose User Type</option>\n                <option value=\"Student\">Student</option>\n                <option value=\"Admin\">Admin</option>\n                <option value=\"Faculty\">Faculty</option>\n                <option value=\"ResearchStaff\">Research Staff</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary mt-3\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  this.props.passQueryParams({\n                    userID,\n                    courseID,\n                    crn,\n                    userType,\n                    firstName,\n                    lastName,\n                    phoneNum,\n                    DOB,\n                    street,\n                    studentID,\n                    email,\n                    city,\n                    state,\n                    zip,\n                    courseName,\n                    numCredits,\n\n                    deptID,\n                    Instructor,\n                  });\n                  // this.props.onAllFormsSubmit(user, pass, userType);\n                  this.clearFields(2);\n                }}\n              >\n                Sign in\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n    ReactDOM.render(button, document.getElementById(\"root\"));\n  };\n\n  hideFields = () => {\n    let showFields = this.showFields;\n    ReactDOM.render(\n      <button onClick={() => showFields()}>Show</button>,\n      document.getElementById(\"root\")\n    );\n  };\n\n  makeForm() {}\n  render() {\n    var {\n      userID,\n      courseID,\n      crn,\n      courseName,\n      numCredits,\n      deptID,\n      userType,\n      firstName,\n      lastName,\n      phoneNum,\n      DOB,\n      street,\n      studentID,\n      email,\n      city,\n      state,\n      zip,\n      Instructor,\n    } = this.state.tempData;\n\n    let fields = [\"userID\", \"firstName\"];\n\n    return (\n      <div className=\"container-fluid\" id=\"loginFormContainer\" max-height=\"80%\">\n        <button onClick={this.hideFields}>Hide</button>\n        <form id=\"form1\">\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <input\n                id=\"userID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"userID\"\n                onChange={(e) => {\n                  userID = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"studentID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"studentID\"\n                onChange={(e) => {\n                  studentID = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"email\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"email\"\n                onChange={(e) => {\n                  email = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"courseID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"userType\"\n                onChange={(e) => {\n                  courseID = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"firstName\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"firstName\"\n                onChange={(e) => {\n                  firstName = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"lastName\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"lastName\"\n                onChange={(e) => {\n                  lastName = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"phoneNum\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"phoneNum\"\n                onChange={(e) => {\n                  phoneNum = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"password\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"street\"\n                onChange={(e) => {\n                  DOB = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"street\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"street\"\n                onChange={(e) => {\n                  street = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"city\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"city\"\n                onChange={(e) => {\n                  city = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"state\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"state\"\n                onChange={(e) => {\n                  state = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"zip\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"zip\"\n                onChange={(e) => {\n                  zip = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"courseID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"courseID\"\n                onChange={(e) => {\n                  courseID = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"courseName\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"courseName\"\n                onChange={(e) => {\n                  courseName = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"numCredits\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"numCredits\"\n                onChange={(e) => {\n                  numCredits = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"crn\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"crn\"\n                onChange={(e) => {\n                  crn = e.target.value;\n                }}\n              />\n            </div>\n\n            <div className=\"col-3\">\n              <input\n                id=\"deptID\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"deptID\"\n                onChange={(e) => {\n                  deptID = e.target.value;\n                }}\n              />\n            </div>\n            <div className=\"col-3\">\n              <input\n                id=\"Instructor\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Instructor\"\n                onChange={(e) => {\n                  Instructor = e.target.value;\n                }}\n              />\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"form-group col-3\">\n              <label for=\"inputState\"></label>\n              <select\n                id=\"inputState\"\n                onChange={(e) => {\n                  userType = e.target.value;\n                }}\n                className=\"form-control\"\n                defaultValue={\"Choose User Type\"}\n              >\n                <option>Choose User Type</option>\n                <option value=\"Student\">Student</option>\n                <option value=\"Admin\">Admin</option>\n                <option value=\"Faculty\">Faculty</option>\n                <option value=\"ResearchStaff\">Research Staff</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary mt-3\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  this.clearFields(1);\n\n                  this.props.passQueryParams({\n                    userID,\n                    crn,\n                    courseID,\n                    userType,\n                    firstName,\n                    lastName,\n                    phoneNum,\n                    DOB,\n                    street,\n                    studentID,\n                    email,\n                    city,\n                    state,\n                    zip,\n                    courseName,\n                    numCredits,\n                    deptID,\n                    Instructor,\n                  });\n                  // this.props.onAllFormsSubmit(user, pass, userType);\n                }}\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AllForms;\n","import React, { Component } from \"react\";\nimport QueryHandler from \"./QueryHandler\";\nimport \"../../styles/NavigationStyles.css\";\nimport ReactDOM from \"react-dom\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fields: [],\n      nav: [\n        { name: \"Home\", onClick: \"#\" },\n        { name: \"Faculty Course List\", onClick: this.props.coursesTeaching },\n        { name: \"Course Search\", onClick: this.props.courseSearch },\n        { name: \"Create Course\", onClick: this.props.createCourse },\n        { name: \"Create User\", onClick: this.props.createUser },\n        { name: \"Degree Audit\", onClick: this.props.degreeAudit },\n        { name: \"Degree Audit 2\", onClick: this.props.degreeAudit2 },\n        { name: \"Delete Course\", onClick: this.props.deleteCourse },\n        { name: \"Drop Course\", onClick: this.props.dropCourse },\n        { name: \"Modify Course\", onClick: this.props.modifyCourse },\n        { name: \"Modify User\", onClick: this.props.modifyUser },\n        { name: \"Register for Course\", onClick: this.props.registerForCourse },\n        { name: \"Student History\", onClick: this.props.studentHistory },\n        {\n          name: \"Unofficial Transcript\",\n          onClick: this.props.unofficialTranscript,\n        },\n        { name: \"Update Password\", onClick: this.props.updatePasswprd },\n        { name: \"View Advisees\", onClick: this.props.viewAdvisees },\n        { name: \"View Advisors\", onClick: this.props.viewAdvisors },\n        { name: \"View All Users\", onClick: this.props.viewAllUsers },\n        { name: \"View Course History\", onClick: this.props.viewCourseHistory },\n        { name: \"View Holds\", onClick: this.props.viewHolds },\n        { name: \"View Registration\", onClick: this.props.viewRegistration },\n        {\n          name: \"View Student Login Info\",\n          onClick: this.props.studentLoginInfo,\n        },\n        {\n          name: \"View Student Schedule\",\n          onClick: this.props.viewStudentSchedule,\n        },\n        { name: \"Logout\", onClick: \"./Logout\" }, // some arbitrary location atm\n      ],\n    };\n  }\n\n  makeFields = (fields) => {\n    let eles = [];\n    let col = 12 % fields.length; // modulo actually coming in handy\n    // dynamically create column length based on amt. fields\n    let colString = col.toString();\n    fields.map((ele, index) => {\n      if (fields.length % 2 == 0) {\n        eles.push(\n          <div className=\"row\">\n            <div className={colString} key=\"index\">\n              <input\n                id={fields[index]}\n                onChange={(e) => {\n                  fields[index] = e.target.value;\n                  console.log(fields[index]);\n                }}\n                placeholder={fields[index]}\n              ></input>\n            </div>{\" \"}\n          </div>\n        );\n      } else {\n        <div className={colString} key=\"index\">\n          <input\n            id={fields[index]}\n            onChange={(e) => {\n              fields[index] = e.target.value;\n              console.log(fields[index]);\n            }}\n            placeholder={fields[index]}\n          ></input>\n        </div>;\n      }\n    });\n    this.setState({ fields: eles });\n    return eles;\n  };\n\n  doSomething() {\n    console.log(\"doing\");\n  }\n\n  makeFields = (fields) => {\n    let eles = [];\n    let col = 12 % fields.length; // modulo actually coming in handy\n    // dynamically create column length based on amt. fields\n    let colString = col.toString();\n    fields.map((ele, index) => {\n      if (fields.length % 2 == 0) {\n        eles.push(\n          <div className=\"row\">\n            <div className={colString} key=\"index\">\n              <input\n                id={fields[index]}\n                onChange={(e) => {\n                  fields[index] = e.target.value;\n                  console.log(fields[index]);\n                }}\n                placeholder={fields[index]}\n              ></input>\n            </div>{\" \"}\n          </div>\n        );\n      } else {\n        <div className={colString} key=\"index\">\n          <input\n            id={fields[index]}\n            onChange={(e) => {\n              fields[index] = e.target.value;\n              console.log(fields[index]);\n            }}\n            placeholder={fields[index]}\n          ></input>\n        </div>;\n      }\n    });\n    this.setState({ fields: eles });\n    return eles;\n  };\n\n  render() {\n    let eles = this.state.nav.map((ele) => {\n      return (\n        <div>\n          <a\n            class=\"nav-link\"\n            id=\"barBody\"\n            //data-toggle=\"pill\"\n            // href=\"#v-pills-home\"\n            role=\"tabpanel\"\n            href=\"#\"\n            onClick={() => {\n              ele.onClick();\n\n              this.makeFields(ele.fields);\n              ReactDOM.render(<div></div>, document.getElementById(\"test2\"));\n            }}\n            //aria-controls=\"v-pills-home\"\n            //aria-selected=\"true\"\n          >\n            {\"crigne\"}\n          </a>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"Sidebar\">\n        <div\n          className=\"container\"\n          id=\"row\"\n          role=\"tablist\"\n          aria-orientation=\"vertical\"\n        >\n          <nav class=\"menu\">{eles}</nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport queries from \"./getQueries\";\n\nimport Home from \"./Home\";\nimport Axios from \"axios\";\nimport NavBar from \"../NavBar\";\nimport AllForms from \"../AllForms\";\nimport ReactDOM from \"react-dom\";\nimport \"../../styles/bodyStyles.css\";\n\n// I will be commenting out the un-needed query handlers\n// Maybe there are some missing from the list, in routes? Or vice versa?\n\nclass QueryHandler extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      res: [],\n      msg: \"\",\n      reqBodyObj: {},\n      data: [],\n      password: \"\",\n      tempData: {\n        // for custom inputs\n        userID: \"\",\n        Instructor: \"\",\n        crn: \"\",\n        courseID: \"\",\n        courseName: \"\",\n        numCredits: \"\",\n        deptID: \"\",\n        userType: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        phoneNum: \"\",\n        DOB: \"\",\n        street: \"\",\n        studentID: \"\",\n        email: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n      },\n    };\n    this.curQuery = \"\";\n    let temp = this.makeSomeTables.bind(this);\n    this.makeSomeTables = temp;\n    temp = this.displayTextMessageOnScreen.bind(this);\n    this.displayTextMessageOnScreen = temp;\n    temp = this.displayNewMsgOnScreen.bind(this);\n    this.displayNewMsgOnScreen = temp;\n  }\n\n  makeSomeTables = (arr, domTarget) => {\n    this.setState({ data: arr });\n    let unique = [];\n    let thList = [];\n    let counter = 0;\n    let result = arr.map((element, index) => {\n      let keys = Object.keys(element);\n      let tdList = [];\n\n      // grab unique elements\n      keys.map((ele) => {\n        if (!unique.includes(ele)) {\n          unique.push(ele);\n        }\n      });\n\n      // make data consisting of each property\n      // map each unique property into an object map containing elements of property unique\n      unique.map((ele, index) => {\n        tdList.push(<td>{element[ele]}</td>);\n\n        if (counter < unique.length) {\n          thList.push(<th id=\"dbHead\">{unique[index]}</th>);\n          counter++;\n        }\n      });\n\n      return <tr id=\"dbRow\">{tdList}</tr>;\n    });\n\n    let ele_ = (\n      <table className=\"table\">\n        <thead class=\"thead-dark\">\n          <tr>{thList}</tr>\n        </thead>\n        <tbody>{result}</tbody>\n      </table>\n    );\n    ReactDOM.render(\n      <div className=\"main\">{ele_}</div>,\n      document.getElementById(domTarget)\n    );\n    console.log(unique);\n  };\n\n  generateAndDisplayTableFromObject = (res, domDestinationID) => {\n    this.makeSomeTables(res, domDestinationID);\n    console.log(\"Displaying some data at id \", domDestinationID);\n  };\n\n  // I put the above function after makeSomeTables because makeSomeTables\n  // must be defined for this to compile, even though this is not alphabetical\n  doHandleGetTranscript = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    newObj[\"studentID\"] = parseInt(newObj[\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Admin/transcript\", { newObj })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          this.generateAndDisplayTableFromObject(response.data, \"test3\");\n        }\n      })\n      .catch(function (error) {\n        if (error) {\n          if (error.response.status == 400)\n            console.log(\"Bad request. Incorrect studentID maybe?\");\n        }\n      });\n  };\n\n  /*\n  doHandleGetCoursesTeaching = () => {\n    Axios.post(\"http://localhost:3305/Admin/coursesTeaching\", {}).then(\n      (response) => {}\n    );\n  };\n*/\n\n  /*\n  checkForNeededProps(first_, toBePassed) {\n    let first = first_;\n    let passed = toBePassed;\n    let eles = {};\n\n    for (const prop in first) {\n      console.log(prop);\n      if (prop in passed) {\n        eles[prop] = toBePassed[prop];\n      }\n    }\n\n    return eles;\n  }\n*/\n  doHandleCourseSearch = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"crn, courseID, courseName, Instructor\",\n    ]);\n    Axios.post(\"http://localhost:3305/Admin/courseSearch\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleCreateCourse = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"courseID\",\n      \"courseName\",\n      \"numCredits\",\n      \"deptID\",\n    ]);\n\n    newObj[\"deptID\"] = newObj.deptID.replace(\"'\");\n\n    Axios.post(\"http://localhost:3305/Admin/createCourse\", { newObj })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          // this.generateAndDisplayTableFromObject(response.data, \"test3\");\n\n          this.displayNewMsgOnScreen(\n            \"Successfully created courseID: \" + newObj[\"courseID\"]\n          );\n        }\n      })\n      .catch(\n        function (error) {\n          this.displayNewMsgOnScreen(\"Bad request. Check fields.\");\n          if (error) {\n            if (error.response.status == 400) console.log(\"Bad request\");\n          }\n        }.bind(this)\n      );\n  };\n\n  displayTextMessageOnScreen = (msg) => {\n    this.clear();\n    console.log(\"Displaying\");\n    let ele = <h2>{msg}</h2>;\n    ReactDOM.render(\n      <div className=\"d-flex justify-content-center\">{ele}</div>,\n      document.getElementById(\"test1\")\n    );\n  };\n\n  displayNewMsgOnScreen = (msg) => {\n    this.clear();\n    console.log(\"Displaying\");\n    let ele = <h2>{msg}</h2>;\n    ReactDOM.render(\n      <div className=\"d-flex justify-content-center\">{ele}</div>,\n      document.getElementById(\"output\")\n    );\n  };\n\n  doHandleCreateUser = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"userID\",\n      \"userType\",\n      \"firstName\",\n      \"lastName\",\n      \"phoneNumber\",\n      \"DOB\",\n      \"street\",\n      \"city\",\n      \"state\",\n      \"zip\",\n    ]);\n    Axios.post(\"http://localhost:3305/Admin/createUser\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleDeleteCourse = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"courseID\"]);\n    Axios.post(\"http://localhost:3305/Admin/deleteCourse\", { newObj })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          // this.generateAndDisplayTableFromObject(response.data, \"test3\");\n          this.displayTextMessageOnScreen(\n            \"Successfully deleted courseID: \" + newObj[\"courseID\"]\n          );\n        }\n      })\n      .catch(\n        function (error) {\n          this.displayTextMessageOnScreen(\"Bad request. Check userID field!\");\n          if (error) {\n            if (error.response.status == 400)\n              console.log(\"Bad request. Incorrect userID maybe?\");\n          }\n        }.bind(this)\n      );\n  };\n\n  doHandleGetDegreeAudit = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    let res = [];\n    Axios.post(\"http://localhost:3305/Admin/degreeAuditPt1\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n\n    Axios.post(\"http://localhost:3305/Admin/degreeAuditPt2\", { newObj }).then(\n      (response) => {\n        console.log(\"RESPONSE PT 2\", response);\n        res = response.data;\n        // Note how I use the div underneath the first table, since both will be\n        // displayed at once and on the same page\n        this.generateAndDisplayTableFromObject(response.data, \"test4\");\n      }\n    );\n  };\n\n  clear = () => {\n    ReactDOM.render(<div></div>, document.getElementById(\"test3\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"test4\"));\n  };\n\n  doHandleDropCourse = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"studentID\",\n      \"crn\",\n    ]);\n\n    Axios.post(\"http://localhost:3305/Admin/dropCourse\", { newObj })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          this.generateAndDisplayTableFromObject(response.data, \"test3\");\n        }\n      })\n      .catch(function (error) {\n        if (error) {\n          if (error.response.status == 400)\n            console.log(\"Bad request. Incorrect userID maybe?\");\n        }\n      });\n  };\n\n  doHandleGetFacultyCourseList = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"facultyID\"]);\n    Axios.post(\"http://localhost:3305/Admin/facultyCourseList\", {\n      newObj,\n    }).then((response) => {\n      this.generateAndDisplayTableFromObject(response, \"test3\");\n    });\n  };\n\n  doHandleModifyCourse = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"courseID\",\n      \"courseName\",\n      \"numCredits\",\n      \"deptID\",\n    ]);\n    Axios.post(\"http://localhost:3305/Admin/modifyCourse\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response, \"test3\");\n      }\n    );\n  };\n\n  doHandleModifyUser = () => {\n    this.clear();\n    let res = [];\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"firstName\",\n      \"lastName\",\n      \"phoneNumber\",\n      \"DOB\",\n      \"street\",\n      \"city\",\n      \"state\",\n      \"zip\",\n      \"userID\",\n    ]);\n\n    console.log(newObj);\n\n    Axios.post(\"http://localhost:3305/Admin/modifyUser\", { newObj })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          console.log(response);\n          this.displayTextMessageOnScreen(\n            \"Modified User \" + newObj[\"userID\"] + \"!\"\n          );\n        }\n      })\n      .catch(\n        function (error) {\n          if (error) {\n            // this.displayTextMessageOnScreen(\"Bad Request.\");\n          }\n        }.bind(this)\n      );\n  };\n\n  doHandleRegisterForCourse = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"studentID\",\n      \"crn\",\n    ]);\n    Axios.post(\"http://localhost:3305/Admin/registerForCourse\", {\n      newObj,\n    }).then((response) => {\n      console.log(response);\n      // this.makeSomeTables(res, \"test3\");\n      ReactDOM.render(\n        <div className=\"main\">\n          <h2>\n            Registered {newObj[\"studentID\"]} for course {newObj[\"crn\"]}!\n          </h2>\n        </div>,\n        document.getElementById(\"test3\")\n      );\n    });\n  };\n  700129072;\n  componentDidMount = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(newObj);\n    Axios.post(\"http://localhost:3305/Faculty/facultyLoginInfo\", {\n      newObj,\n    }).then((response) => {\n      console.log(response);\n      let { userID, firstName, lastName } = response.data[0];\n      let temp = { userID: userID, firstName: firstName, lastName: lastName };\n      console.log(temp);\n      this.displayLoginHeader(temp);\n      ReactDOM.render(<div></div>, document.getElementById(\"root\"));\n    });\n  };\n  displayLoginHeader = (obj) => {\n    let { userID, userType, firstName, lastName, email, password } = obj;\n    // may use some of those other proeprties later\n    this.displayTextMessageOnScreen(\n      <div>\n        <h3 className=\"text-center\">Welcome to New Eastbury </h3>\n        <h1 className=\"text-center\" style={{ textDecoration: \"underline\" }}>\n          {\" \"}\n          {firstName} {lastName}!<h3>(UserID: {userID})</h3>\n        </h1>\n      </div>,\n      \"test1\"\n    );\n  };\n\n  doHandleGetStudentHistory = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Admin/studentHistory\", {\n      newObj,\n    }).then((response) => {\n      console.log(response);\n      this.generateAndDisplayTableFromObject(response.data, \"test3\");\n    });\n  };\n\n  doHandleGetAdminLoginInfo = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    Axios.post(\"http://localhost:3305/Admin/adminLoginInfo\", {\n      newObj,\n    }).then((response) => {\n      this.generateAndDisplayTableFromObject(response.data, \"test3\");\n    });\n  };\n\n  doHandleLogin = () => {\n    this.clear();\n    let reqBody = this.state.reqBodyObj;\n    let newObj = {};\n    let needed = [\"userName\", \"password\", \"userType\"];\n    needed.map((ele) => {\n      if (ele in reqBody) {\n        newObj[ele] = reqBody[ele];\n      } else {\n        newObj[ele] = \"\";\n      }\n    });\n\n    Axios.post(\"http://localhost:3305/Admin/courseSearch\", {\n      newObj,\n    }).then((response) => {});\n  };\n\n  doHandleUpdatePassword = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"password\",\n      \"userID\",\n    ]);\n\n    Axios.post(\"http://localhost:3305/Admin/updatePassword\", { newObj }).then(\n      (response) => {\n        this.displayTextMessageOnScreen(\n          \"Updated password for user \" + newObj[\"userID\"] + \"!\"\n        );\n      }\n    );\n  };\n\n  doHandleViewAllUsers = () => {\n    this.clear();\n    this.curQuery = queries.viewAllUsers;\n\n    Axios.post(\"http://localhost:3305/Admin/viewAllUsers\", {}).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleViewStudentHistory = () => {\n    this.clear();\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n\n    Axios.post(\"http://localhost:3305/Admin/viewCourseHistory\", {\n      newObj,\n    }).then((response) => {});\n  };\n\n  doHandleViewFacultyAdvisors = () => {\n    this.clear();\n    this.curQuery = queries.viewFacultyAdvisors;\n    Axios.post(\"http://localhost:3305/Admin/viewFacultyAdvisors\", {}).then(\n      (response) => {}\n    );\n  };\n\n  doHandleViewStudentAdvisees = () => {\n    this.clear();\n    Axios.post(\"http://localhost:3305/Admin/viewStudentAdvisees\", {}).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleViewHolds = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Admin/viewHolds\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleViewRegistration = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Admin/viewRegistration\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleViewStudentSchedule = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Admin/viewStudentSchedule\", {\n      newObj,\n    }).then((response) => {\n      this.generateAndDisplayTableFromObject(response.data, \"test3\");\n    });\n  };\n\n  generateObjectWithNeededPropertiesOnly = (neededPropsArr) => {\n    let newObj = {};\n    let reqBody = this.state.reqBodyObj;\n    let neededProps = neededPropsArr;\n    neededProps.map((ele) => {\n      if (ele in reqBody) {\n        newObj[ele] = reqBody[ele];\n      } else {\n        newObj[ele] = \"\";\n      }\n    });\n\n    return newObj;\n  };\n\n  doHandleTestLogin = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n\n    Axios.post(\"http://localhost:3305/Admin/testLogin\", { newObj }).then(\n      (response) => {}\n    );\n  };\n\n  getQueryParams = (paramObj) => {\n    let newObj = paramObj;\n    console.log(\"Trying to update query: \" + paramObj);\n    this.setState({ tempData: newObj });\n    console.log(this.state.tempData);\n    console.log(\"Updated properties\");\n  };\n\n  updateParams = (key, value) => {\n    console.log(key);\n\n    let tempData = this.state.tempData;\n    tempData[key] = value;\n    this.setState({ tempData });\n\n    console.log(\"QUERY HANDLER: changed state of relevant key: \", key);\n    console.log(\"Temp Data: \", this.state.tempData);\n\n    let reqBodyObj = this.state.reqBodyObj;\n    reqBodyObj[key] = value;\n    this.setState({ reqBodyObj });\n\n    let needed = [];\n\n    console.log(\"Needed\", needed);\n  };\n\n  makeForms = () => {\n    // let ele = <AllForms passQueryParams={this.getQueryParams()}></AllForms>;\n    // ReactDOM.render(ele, document.getElementById(\"root\"));\n\n    return <AllForms passQueryParams={this.getQueryParams}></AllForms>;\n  };\n\n  render() {\n    return (\n      <div>\n        {/*this.makeForms()*/}\n        <NavBar\n          formData={this.state.tempData}\n          adminLoginInfo={this.doHandleGetAdminLoginInfo}\n          facultyCourseList={this.doHandleGetFacultyCourseList}\n          courseSearch={this.doHandleCourseSearch}\n          createCourse={this.doHandleCreateCourse}\n          createUser={this.doHandleCreateUser}\n          deleteCourse={this.doHandleDeleteCourse}\n          degreeAudit={this.doHandleGetDegreeAudit}\n          getTranscript={this.doHandleGetTranscript}\n          dropStudentCourse={this.doHandleDropCourse}\n          testLogin={this.doHandleTestLogin}\n          modifyCourse={this.doHandleModifyCourse}\n          modifyUser={this.doHandleModifyUser}\n          registerStudentForCourse={this.doHandleRegisterForCourse}\n          studentHistory={this.doHandleGetStudentHistory}\n          // studentLoginInfo={this.doHandleGetStudentLoginInfo}\n          viewStudentTranscript={this.doHandleGetTranscript}\n          updatePassword={this.doHandleUpdatePassword}\n          viewAllUsers={this.doHandleViewAllUsers}\n          viewCourseHistory={this.doHandleViewStudentHistory}\n          viewStudentHistory={this}\n          viewFacultyAdvisors={this.doHandleViewFacultyAdvisors}\n          // viewFacultyAdvisors={this.doHandleViewAdvisors}\n          viewStudentHolds={this.doHandleViewHolds}\n          viewRegistration={this.doHandleViewRegistration}\n          viewStudentAdvisees={this.doHandleViewStudentAdvisees}\n          viewStudentSchedule={this.doHandleViewStudentSchedule}\n          userType={\"Admin\"}\n          updateParams={this.updateParams}\n        ></NavBar>\n      </div>\n    );\n  }\n}\n\nexport default QueryHandler;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Axios from \"axios\";\nimport \"../bootstrap/css/bootstrap.css\";\nimport \"../bootstrap/css/bootstrap.min.css\";\nimport PostRequest from \"./Post_Request_Template\";\nimport QueryHandler from \"./Admin/QueryHandler\";\n\nimport \"../styles/bodyStyles.css\";\n/*\nPostRequest({\n  username: \"smashamlw@neweastbury.edu\",\n  password: \"jSNHlqbS\",\n  userType: \"Student\",\n});\n*/\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: [], tableData: [[]], isShow: false };\n    this.makeSomeTables = this.makeSomeTables.bind(this);\n\n    // I've been experimenting w/ different queries\n    // basically postrequest can take whatever parameters and whatever\n    // path as needed, paths begin as follows http://localhost:3305$PATH\n    /*\n  query = () => {\n    //    Axios.post(\"http://localhost:3305/masterSchedule\", {\n    // Axios.post(\"http://localhost:3305/Admin/\", {\n    Axios.post(\"http://localhost:3305/Main/masterSchedule\", {}).then(\n      (response) => {\n        console.log(response);\n        // console.log(\"QUERY!!!!!\");\n        this.props.obj.data = response.data;\n        console.log(PostRequest);\n      }\n    );\n  };\n\n*/\n  }\n\n  makeSomeTables = (arr) => {\n    this.setState({ data: arr });\n    let unique = [];\n    let thList = [];\n    let counter = 0;\n    let result = this.state.data.map((element, index) => {\n      let keys = Object.keys(element);\n      let tdList = [];\n\n      // grab unique elements\n      keys.map((ele) => {\n        if (!unique.includes(ele)) {\n          unique.push(ele);\n        }\n      });\n\n      // make data consisting of each property\n      // map each unique property into an object map containing elements of property unique\n      let tdElements = unique.map((ele, index) => {\n        tdList.push(<td>{element[ele]}</td>);\n\n        if (counter < unique.length) {\n          thList.push(<th id=\"dbHead\">{unique[index]}</th>);\n          counter++;\n        }\n      });\n\n      return <tr id=\"dbRow\">{tdList}</tr>;\n    });\n\n    let ele_ = (\n      <table className=\"table\">\n        <thead class=\"thead-dark\">\n          <tr>{thList}</tr>\n        </thead>\n        <tbody>{result}</tbody>\n      </table>\n    );\n    ReactDOM.render(\n      <div className=\"main\">{ele_}</div>,\n      document.getElementById(\"test2\")\n    );\n    console.log(unique);\n  };\n\n  show = () => {\n    this.setState({ isShow: true });\n  };\n\n  // ten cols\n  // 181 rows\n\n  // so apparently the way to do this is with an array\n  // then returning a div containing the array inside curly braces []\n  // now to implement this in generateTable\n\n  render() {\n    // this.query();\n    ReactDOM.render(<p>\"crigne\"</p>, document.getElementById(\"test2\"));\n    return (\n      <div>\n        {/* {() => ReactDOM.render(JSX, document.getElementById(\"root\"))} */}\n        {/*<button onClick={() => this.query()}>Click Me</button>*/}\n\n        <QueryHandler\n          makeTable={this.makeSomeTables}\n          obj={{ data: [] }}\n        ></QueryHandler>\n        <button onClick={this.makeSomeTables}>View Schedule</button>\n        {this.state.isShow && <div></div>}\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport queries from \"./getQueries\";\nimport Home from \"./Home\";\nimport Axios from \"axios\";\nimport NavBar from \"../NavBar\";\nimport AllForms from \"../AllForms\";\nimport ReactDOM from \"react-dom\";\nimport { update } from \"node-persist\";\nimport \"../../_styles_/NavigationScrolling.css\";\n\nclass QueryHandler extends Component {\n  //faculty\n  constructor(props) {\n    super(props);\n    this.state = {\n      reqBodyObj: {},\n      tempData: {\n        // for custom inputs\n        userID: \"\",\n        Instructor: \"\",\n        crn: \"\",\n        courseID: \"\",\n        courseName: \"\",\n        numCredits: \"\",\n        deptID: \"\",\n        userType: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        phoneNum: \"\",\n        DOB: \"\",\n        street: \"\",\n        studentID: \"\",\n        email: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n        password: \"\",\n      },\n    };\n    this.curQuery = \"\";\n    let temp = this.makeSomeTables.bind(this);\n    this.makeSomeTables = temp;\n    temp = this.displayTextMessageOnScreen.bind(this);\n    this.displayTextMessageOnScreen = temp;\n  }\n\n  makeSomeTables = (arr, domTarget) => {\n    this.setState({ data: arr });\n    let unique = [];\n    let thList = [];\n    let counter = 0;\n    let result = arr.map((element, index) => {\n      let keys = Object.keys(element);\n      let tdList = [];\n\n      // grab unique elements\n      keys.map((ele) => {\n        if (!unique.includes(ele)) {\n          unique.push(ele);\n        }\n      });\n\n      // make data consisting of each property\n      // map each unique property into an object map containing elements of property unique\n      unique.map((ele, index) => {\n        tdList.push(<td>{element[ele]}</td>);\n\n        if (counter < unique.length) {\n          thList.push(<th id=\"dbHead\">{unique[index]}</th>);\n          counter++;\n        }\n      });\n\n      return <tr id=\"dbRow\">{tdList}</tr>;\n    });\n\n    let ele_ = (\n      <table className=\"table\">\n        <thead class=\"thead-dark\">\n          <tr>{thList}</tr>\n        </thead>\n        <tbody>{result}</tbody>\n      </table>\n    );\n    ReactDOM.render(\n      <div className=\"main\">{ele_}</div>,\n      document.getElementById(domTarget)\n    );\n    console.log(unique);\n  };\n\n  displayTextMessageOnScreen = (msg, destinationDomObj) => {\n    console.log(\"Displaying\");\n    let ele = msg;\n    ReactDOM.render(\n      <div className=\"main\">{ele}</div>,\n      document.getElementById(destinationDomObj)\n    );\n  };\n\n  generateAndDisplayTableFromObject = (res, domDestinationID) => {\n    this.makeSomeTables(res, domDestinationID);\n    console.log(\"Displaying some data at id \", domDestinationID);\n  };\n\n  doHandleCourseSearch = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"crn\",\n      \"courseID\",\n      \"courseName\",\n      \"Instructor\",\n    ]);\n    Axios.post(\"http://localhost:3305/Admin/courseSearch\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      }\n    );\n  };\n\n  doHandleGetDegreeAudit = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    let res = [];\n    Axios.post(\"http://localhost:3305/Faculty/degreeAuditPt1\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      }\n    );\n\n    Axios.post(\"http://localhost:3305/Faculty/degreeAuditPt2\", { newObj }).then(\n      (response) => {\n        console.log(\"RESPONSE PT 2\", response);\n        res = response.data;\n        // Note how I use the div underneath the first table, since both will be\n        // displayed at once and on the same page\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleGetFacultyAssignedCourseList = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Faculty/assignedCourseList\", {\n      newObj,\n    })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          // this.generateAndDisplayTableFromObject(response.data, \"test2\");\n          this.generateAndDisplayTableFromObject(response.data, \"test2\");\n        }\n      })\n      .catch(\n        function (error) {\n          this.displayTextMessageOnScreen(\n            <h2>Bad request. Something went wrong.</h2>,\n            \"test2\"\n          );\n          if (error) {\n            if (error.response.status == 400)\n              console.log(\"Something went wrong.\");\n          }\n        }.bind(this)\n      );\n  };\n\n  componentDidMount = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(newObj);\n    Axios.post(\"http://localhost:3305/Faculty/facultyLoginInfo\", {\n      newObj,\n    }).then((response) => {\n      console.log(response);\n      let { userID, firstName, lastName } = response.data[0];\n      let temp = { userID: userID, firstName: firstName, lastName: lastName };\n      console.log(temp);\n      this.displayLoginHeader(temp);\n    });\n  };\n\n  displayLoginHeader = (obj) => {\n    let { userID, userType, firstName, lastName, email, password } = obj;\n    // may use some of those other proeprties later\n    this.displayTextMessageOnScreen(\n      <div>\n        <h3 className=\"text-center\">Welcome to New Eastbury </h3>\n        <h1 className=\"text-center\" style={{ textDecoration: \"underline\" }}>\n          {\" \"}\n          {firstName} {lastName}!<h3>(UserID: {userID})</h3>\n        </h1>\n      </div>,\n      \"test1\"\n    );\n  };\n\n  doHandleGetFacultyLoginInfo = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    Axios.post(\"http://localhost:3305/Faculty/facultyLoginInfo\", {\n      newObj,\n    }).then((response) => {\n      this.generateAndDisplayTableFromObject(response.data, \"test2\");\n    });\n  };\n\n  doHandleRecordAttendance = () => {\n    this.curQuery = queries.recordAttendance;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"studentID\",\n      \"crn\",\n      \"isPresent\",\n      \"date\",\n    ]);\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Faculty/recordAttendance\", {\n      newObj,\n    }).then((response) => {\n      console.log(\"Response\");\n      console.log(response);\n    });\n  };\n\n  doHandleGetStudentHistory = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n\n    Axios.post(\"http://localhost:3305/Faculty/studentHistory\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      }\n    );\n  };\n\n  doHandleGetTranscript = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Faculty/transcript\", { newObj })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          this.generateAndDisplayTableFromObject(response.data, \"test2\");\n        }\n      })\n      .catch(function (error) {\n        if (error) {\n          if (error.response.status == 400)\n            console.log(\"Bad request. Incorrect studentID maybe?\");\n        }\n      });\n  };\n\n  doHandleUpdatePassword = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"password\",\n      \"facultyID\",\n    ]);\n\n    newObj[\"facultyID\"] = this.props.userCredentials[\"userID\"];\n\n    Axios.post(\"http://localhost:3305/Faculty/updatePassword\", { newObj })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          this.displayTextMessageOnScreen(\n            <h2 className=\"text-center\">Successfully updated password!</h2>,\n            \"test2\"\n          );\n        }\n      })\n      .catch(\n        function (error) {\n          if (error) {\n            if (error.response.status == 400)\n              this.displayTextMessageOnScreen(\n                <h2 className=\"text-center\">\n                  Something went wrong. Check the console?\n                </h2>,\n                \"test2\"\n              );\n          }\n        }.bind(this)\n      );\n  };\n\n  doHandleViewHolds = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Faculty/viewHolds\", { newObj }).then(\n      (response) => {\n        console.log(response);\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      }\n    );\n  };\n\n  doHandleViewRegistration = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Faculty/viewRegistration\", {\n      newObj,\n    }).then((response) => {\n      console.log(response);\n      this.generateAndDisplayTableFromObject(response.data, \"test2\");\n    });\n  };\n\n  doHandleViewStudentAdvisees = () => {\n    let id = this.props.userCredentials[\"userID\"];\n    let newObj = { facultyID: id };\n    Axios.post(\"http://localhost:3305/Faculty/viewStudentAdvisees\", {\n      newObj,\n    })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          this.generateAndDisplayTableFromObject(response.data, \"test2\");\n        }\n      })\n      .catch(function (error) {\n        if (error) {\n          if (error.response.status == 400)\n            console.log(\"Bad request. Incorrect userID maybe?\");\n        } else {\n          console.log(\"Some other thing went wrong.\");\n        }\n      });\n  };\n\n  doHandleViewStudentSchedule = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    Axios.post(\"http://localhost:3305/Faculty/viewStudentSchedule\", {\n      newObj,\n    })\n      .then((response) => {\n        console.log(response.status);\n        // If response exists - A.K.A. in JS, if it is 'truthy'.\n        if (response.status == 200) {\n          this.generateAndDisplayTableFromObject(response.data, \"test2\");\n        }\n      })\n      .catch(function (error) {\n        if (error) {\n          if (error.response.status == 400)\n            console.log(\"Bad request. Incorrect studentID maybe?\");\n        } else {\n          console.log(\"Some other thing went wrong.\");\n        }\n      });\n  };\n\n  generateObjectWithNeededPropertiesOnly = (neededPropsArr) => {\n    let newObj = {};\n    let reqBody = this.state.reqBodyObj;\n    let neededProps = neededPropsArr;\n    neededProps.map((ele) => {\n      if (ele in reqBody) {\n        //   if (ele == \"numCredits\") {\n        //   console.log(\"Found an integer\");\n        // newObj[ele] = parseInt(reqBody[ele]);\n\n        // using in instead of includes, it's better apparently\n        newObj[ele] = reqBody[ele];\n      } else {\n        newObj[ele] = \"\";\n      }\n    });\n\n    return newObj;\n  };\n\n  doHandleTestLogin = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n\n    Axios.post(\"http://localhost:3305/Admin/testLogin\", { newObj }).then(\n      (response) => {\n        console.log(response);\n      }\n    );\n  };\n\n  getQueryParams = (paramObj) => {\n    let newObj = paramObj;\n    console.log(\"Trying to update query: \" + paramObj);\n    this.setState({ tempData: newObj });\n    console.log(this.state.tempData);\n    console.log(\"Updated properties\");\n  };\n\n  updateParams = (key, value) => {\n    console.log(key);\n\n    let tempData = this.state.tempData;\n    tempData[key] = value;\n    this.setState({ tempData });\n    // Had to create another object and then overwrite it\n    // Interesting... lol\n    console.log(\"QUERY HANDLER: changed state of relevant key: \", key);\n    console.log(\"Temp Data: \", this.state.tempData);\n\n    let reqBodyObj = this.state.reqBodyObj;\n    reqBodyObj[key] = value;\n    this.setState({ reqBodyObj });\n  };\n\n  makeForms = () => {\n    // let ele = <AllForms passQueryParams={this.getQueryParams()}></AllForms>;\n    // ReactDOM.render(ele, document.getElementById(\"root\"));\n\n    return <AllForms passQueryParams={this.getQueryParams}></AllForms>;\n  };\n\n  render() {\n    let formData = {\n      userID: \"\",\n      courseID: \"\",\n      crn: \"\",\n      courseName: \"\",\n      numCredits: \"\",\n      deptID: \"\",\n      userType: \"\",\n      firstName: \"\",\n      Instructor: \"\",\n      lastName: \"\",\n      phoneNum: \"\",\n      DOB: \"\",\n      street: \"\",\n      studentID: \"\",\n      email: \"\",\n      city: \"\",\n      state: \"\",\n      zip: \"\",\n    };\n\n    return (\n      <div className=\"Navigation\">\n        <NavBar\n          className=\"Navigation\"\n          assignedCourseList={this.doHandleGetFacultyAssignedCourseList}\n          courseSearch={this.doHandleCourseSearch}\n          degreeAudit={this.doHandleGetDegreeAudit}\n          facultyLoginInfo={this.doHandleGetFacultyLoginInfo}\n          recordAttendance={this.doHandleRecordAttendance}\n          studentHistory={this.doHandleGetStudentHistory}\n          transcript={this.doHandleGetTranscript}\n          updatePassword={this.doHandleUpdatePassword}\n          viewHolds={this.doHandleViewHolds}\n          viewRegistration={this.doHandleViewRegistration}\n          viewStudentAdvisees={this.doHandleViewStudentAdvisees}\n          viewStudentSchedule={this.doHandleViewStudentSchedule}\n          userType={\"Faculty\"}\n          updateParams={this.updateParams}\n        ></NavBar>\n      </div>\n    );\n  }\n}\n\nexport default QueryHandler;\n","import React, { Component } from \"react\";\nimport QueryHandler from \"./QueryHandler\";\nimport \"../../styles/NavigationStyles.css\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nav: [\n        { name: \"Home\", onClick: \"#\" },\n        { name: \"Assigned Course List\", onClick: this.props.facultyCoursesTeaching },\n        { name: \"Course Search\", onClick: this.props.courseSearch },\n        { name: \"Degree Audit Pt1\", onClick: this.props.degreeAuditPt1 },\n        { name: \"Degree Audit Pt2\", onClick: this.props.degreeAuditPt2 },\n        { name: \"Faculty Login Info\", onClick: this.props.facultyLoginInfo },\n        { name: \"Record Attendance\", onClick: this.props.recordAttendance },\n        { name: \"Student History\", onClick: this.props.studentHistory },\n        { name: \"Unofficial Transcript\", onClick: this.props.transcript },\n        { name: \"Update Password\", onClick: this.props.updatePassword },\n        { name: \"View Holds\", onClick: this.props.viewHolds },\n        { name: \"View Registration\", onClick: this.props.viewRegistration },\n        { name: \"View Student Advisees\", onClick: this.props.viewStudentAdvisees },\n        { name: \"View Student Schedule\", onClick: this.props.viewStudentSchedule },\n        { name: \"Logout\", onClick: \"./Logout\" }, // some arbitrary location atm\n      ],\n    };\n  }\n\n  doSomething() {\n    console.log(\"doing\");\n  }\n\n\n  render() {\n\n    let eles = this.state.nav.map((ele) => {\n      return (\n        <div>\n          <a\n            class=\"nav-link\"\n            id=\"barBody\"\n            //data-toggle=\"pill\"\n            // href=\"#v-pills-home\"\n            role=\"tabpanel\"\n            href=\"#\"\n            onClick={ele.onClick}\n            //aria-controls=\"v-pills-home\"\n            //aria-selected=\"true\"\n          >\n            {ele.name}\n          </a>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"Sidebar\">\n        <div\n          className=\"container\"\n          id=\"row\"\n          role=\"tablist\"\n          aria-orientation=\"vertical\"\n        >\n          <nav class=\"menu\">{eles}</nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport NavBar from \"../NavBar\";\nclass QueryHandler extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { display: <NavBar userType={this.props.userType}></NavBar> };\n  }\n\n  render() {\n    return <div></div>;\n  }\n}\n\nexport default QueryHandler;\n","import React, { Component } from \"react\";\nimport queries from \"./getQueries\";\nimport Home from \"./Home\";\nimport Axios from \"axios\";\nimport Display from \"../Display\";\nimport NavBar from \"../NavBar\";\nimport AllForms from \"../AllForms\";\nimport ReactDOM from \"react-dom\";\n\nclass QueryHandler extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      reqBodyObj: {},\n      tempData: {\n        // for custom inputs\n        userID: \"\",\n        Instructor: \"\",\n        crn: \"\",\n        courseID: \"\",\n        courseName: \"\",\n        numCredits: \"\",\n        deptID: \"\",\n        userType: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        phoneNum: \"\",\n        DOB: \"\",\n        street: \"\",\n        studentID: \"\",\n        email: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n        password: \"\"\n      },\n    };\n    this.curQuery = \"\";\n  }\n\n  makeSomeTables = (arr, domTarget) => {\n    this.setState({ data: arr });\n    let unique = [];\n    let thList = [];\n    let counter = 0;\n    let result = arr.map((element, index) => {\n      let keys = Object.keys(element);\n      let tdList = [];\n\n      // grab unique elements\n      keys.map((ele) => {\n        if (!unique.includes(ele)) {\n          unique.push(ele);\n        }\n      });\n\n      // make data consisting of each property\n      // map each unique property into an object map containing elements of property unique\n      unique.map((ele, index) => {\n        tdList.push(<td>{element[ele]}</td>);\n\n        if (counter < unique.length) {\n          thList.push(<th id=\"dbHead\">{unique[index]}</th>);\n          counter++;\n        }\n      });\n\n      return <tr id=\"dbRow\">{tdList}</tr>;\n    });\n\n    let ele_ = (\n      <table className=\"table\">\n        <thead class=\"thead-dark\">\n          <tr>{thList}</tr>\n        </thead>\n        <tbody>{result}</tbody>\n      </table>\n    );\n    ReactDOM.render(\n      <div className=\"main\">{ele_}</div>,\n      document.getElementById(domTarget)\n    );\n    console.log(unique);\n  };\n\n  displayTextMessageOnScreen = (msg) => {\n    console.log(\"Displaying\");\n    let ele = <h2>{msg}</h2>;\n    ReactDOM.render(\n      <div className=\"main\">{ele}</div>,\n      document.getElementById(\"test2\")\n    );\n  };\n\n  generateAndDisplayTableFromObject = (res, domDestinationID) => {\n    this.makeSomeTables(res, domDestinationID);\n    console.log(\"Displaying some data at id \", domDestinationID);\n  };\n\n  doHandleCourseSearch = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"courseID\"\n    ]);\n    Axios.post(\"http://localhost:3305/Student/courseSearch\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      }\n    );\n  };\n\n  doHandleGetDegreeAudit = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"studentID\"]);\n    newObj[\"studentID\"] = this.props.userCredentials[\"userID\"];\n    let res = [];\n    Axios.post(\"http://localhost:3305/Student/degreeAuditPt1\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      }\n    );\n\n    Axios.post(\"http://localhost:3305/Student/degreeAuditPt2\", { newObj }).then(\n      (response) => {\n        console.log(\"RESPONSE PT 2\", response);\n        res = response.data;\n        // Note how I use the div underneath the first table, since both will be\n        // displayed at once and on the same page\n        this.generateAndDisplayTableFromObject(response.data, \"test3\");\n      }\n    );\n  };\n\n  doHandleDropCourse = () => {\n    this.curQuery = queries.dropCourse;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"studentID\",\n      \"crn\",\n    ]);\n    newObj[\"studentID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/dropCourse\", { newObj }).then(\n      (response) => {\n        console.log(\"Response\");\n        console.log(response);\n      });\n  };\n\n  doHandleRegisterForCourse = () => {\n    this.curQuery = queries.registerForCourse;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"studentID\",\n      \"crn\",\n    ]);\n    newObj[\"studentID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/registerForCourse\", { newObj }).then(\n      (response) => {\n        console.log(\"Response\");\n        console.log(response);\n      });\n  };\n\n  doHandleGetStudentHistory = () => {\n    this.curQuery = queries.studentHistory;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"userID\",\n    ]);\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/studentHistory\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      });\n  };\n\n  doHandleGetTranscript = () => {\n    this.curQuery = queries.transcript;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"userID\",\n    ]);\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/transcript\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      });\n  };\n\n  doHandleUpdatePassword = () => {\n    this.curQuery = queries.updatePassword;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"password\",\n      \"studentID\"\n    ]);\n    newObj[\"studentID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/updatePassword\", { newObj }).then(\n      (response) => {\n        console.log(\"Response\");\n        console.log(response);\n      });\n  };\n\n  doHandleViewAdvisor = () => {\n    this.curQuery = queries.viewAdvisor;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"userID\",\n    ]);\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/viewAdvisor\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      });\n  };\n\n  doHandleViewHolds = () => {\n    this.curQuery = queries.viewHolds;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"userID\",\n    ]);\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/viewHolds\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      });\n  };\n\n  doHandleViewRegistration = () => {\n    this.curQuery = queries.viewRegistration;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"userID\",\n    ]);\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/viewRegistration\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      });\n  };\n\n  doHandleGetViewStudentLoginInfo = () => {\n    this.curQuery = queries.viewStudentLoginInfo;\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\n      \"userID\",\n    ]);\n    newObj[\"userID\"] = this.props.userCredentials[\"userID\"];\n    console.log(\"Submitted request body: \" + newObj);\n    Axios.post(\"http://localhost:3305/Student/studentLoginInfo\", { newObj }).then(\n      (response) => {\n        this.generateAndDisplayTableFromObject(response.data, \"test2\");\n      });\n  };\n\n  getQueryParams = (paramObj) => {\n    let newObj = paramObj;\n    this.setState({ tempData: newObj });\n    console.log(this.state.tempData);\n    console.log(\"Updated properties\");\n  };\n\n  makeForms = () => {\n    let ele = <AllForms passQueryParams={this.getQueryParams}></AllForms>;\n    ReactDOM.render(ele, document.getElementById(\"root\"));\n    this.setState();\n    console.log();\n    console.log(\"Generating forms\");\n  };\n\n  generateObjectWithNeededPropertiesOnly = (neededPropsArr) => {\n    let newObj = {};\n    let reqBody = this.state.reqBodyObj;\n    let neededProps = neededPropsArr;\n    neededProps.map((ele) => {\n      if (ele in reqBody) {\n        //   if (ele == \"numCredits\") {\n        //   console.log(\"Found an integer\");\n        // newObj[ele] = parseInt(reqBody[ele]);\n\n        // using in instead of includes, it's better apparently\n        newObj[ele] = reqBody[ele];\n      } else {\n        newObj[ele] = \"\";\n      }\n    });\n\n    return newObj;\n  };\n\n  doHandleTestLogin = () => {\n    let newObj = this.generateObjectWithNeededPropertiesOnly([\"userID\"]);\n\n    Axios.post(\"http://localhost:3305/Admin/testLogin\", { newObj }).then(\n      (response) => {\n        console.log(response);\n      }\n    );\n  };\n\n  getQueryParams = (paramObj) => {\n    let newObj = paramObj;\n    console.log(\"Trying to update query: \" + paramObj);\n    this.setState({ tempData: newObj });\n    console.log(this.state.tempData);\n    console.log(\"Updated properties\");\n  };\n\n  updateParams = (key, value) => {\n    console.log(key);\n\n    let tempData = this.state.tempData;\n    tempData[key] = value;\n    this.setState({ tempData });\n    // Had to create another object and then overwrite it\n    // Interesting... lol\n    console.log(\"QUERY HANDLER: changed state of relevant key: \", key);\n    console.log(\"Temp Data: \", this.state.tempData);\n\n    let eles = [];\n    let reqBodyObj = this.state.reqBodyObj;\n    reqBodyObj[key] = value;\n    this.setState({ reqBodyObj });\n\n    let needed = [];\n    let values = [];\n\n    console.log(\"Needed\", needed);\n  };\n\n  makeForms = () => {\n    // let ele = <AllForms passQueryParams={this.getQueryParams()}></AllForms>;\n    // ReactDOM.render(ele, document.getElementById(\"root\"));\n\n    return <AllForms passQueryParams={this.getQueryParams}></AllForms>;\n  };\n\n  render() {\n    //let display = this.state.display;\n    //console.log(display);\n    return (\n      <div>\n        {this.makeForms()}\n        <NavBar\n          courseSearch={this.doHandleCourseSearch}\n          degreeAudit={this.doHandleGetDegreeAudit}\n          dropCourse={this.doHandleDropCourse}\n          registerForCourse={this.doHandleRegisterForCourse}\n          studentHistory={this.doHandleGetStudentHistory}\n          transcript={this.doHandleGetTranscript}\n          updatePassword={this.doHandleUpdatePassword}\n          viewAdvisor={this.doHandleViewAdvisor}\n          viewHolds={this.doHandleViewHolds}\n          viewRegistration={this.doHandleViewRegistration}\n          studentLoginInfo={this.doHandleGetViewStudentLoginInfo}\n          userType={\"Student\"}\n          updateParams={this.updateParams}\n        ></NavBar>\n      </div>\n    );\n  }\n}\n\nexport default QueryHandler;\n","import React, { Component } from \"react\";\nimport QueryHandler from \"./QueryHandler\";\nimport \"../../styles/NavigationStyles.css\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nav: [\n        { name: \"Home\", onClick: \"#\" },\n        { name: \"Course Search\", onClick: this.props.courseSearch },\n        { name: \"Degree Audit Pt1\", onClick: this.props.degreeAuditPt1 },\n        { name: \"Degree Audit Pt2\", onClick: this.props.degreeAuditPt2 },\n        { name: \"Drop Course\", onClick: this.props.dropCourse },\n        { name: \"Register for Course\", onClick: this.props.registerForCourse },\n        { name: \"Student History\", onClick: this.props.studentHistory },\n        { name: \"Unofficial Transcript\", onClick: this.props.unofficialTranscript,},\n        { name: \"Update Password\", onClick: this.props.updatePasswprd },\n        { name: \"View Advisor\", onClick: this.props.viewAdvisor },\n        { name: \"View Holds\", onClick: this.props.viewHolds },\n        { name: \"View Registration\", onClick: this.props.viewRegistration },\n        { name: \"View Student Login Info\", onClick: this.props.viewStudentLoginInfo },\n        { name: \"Logout\", onClick: \"./Logout\" }, // some arbitrary location atm\n      ],\n    };\n  }\n\n  doSomething() {\n    console.log(\"doing\");\n  }\n\n  render() {\n    // Grab the ele array, spit out some buttons\n\n    let eles = this.state.nav.map((ele) => {\n      return (\n        <div>\n          <a\n            class=\"nav-link\"\n            id=\"barBody\"\n            //data-toggle=\"pill\"\n            // href=\"#v-pills-home\"\n            role=\"tabpanel\"\n            href=\"#\"\n            onClick={ele.onClick}\n            //aria-controls=\"v-pills-home\"\n            //aria-selected=\"true\"\n          >\n            {ele.name}\n          </a>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"Sidebar\">\n        <div\n          className=\"container\"\n          id=\"row\"\n          role=\"tablist\"\n          aria-orientation=\"vertical\"\n        >\n          <nav class=\"menu\">{eles}</nav>\n        </div>\n      </div>\n    );\n    // set height of parent to certain amount of pixels ex 100px\n    // children set max-width to 100%, which will just mean 100px maximum\n    // since that's the parent width\n  }\n}\n\nexport default Home;\n\n// will make an array of items and then map them to buttons\n","import React, { Component } from \"react\";\nimport NavBar from \"./Components/NavBar.jsx\";\nimport Login from \"./Components/Login.jsx\";\nimport Axios from \"axios\";\nimport \"./bootstrap/css/bootstrap.css\";\nimport \"./bootstrap/css/bootstrap.min.css\";\n\nimport MasterSchedule from \"./Components/Display\";\nimport Display from \"./Components/Display\";\nimport Faculty from \"./Components/Faculty/Faculty.js\";\nimport ReactDOM from \"react-dom\";\nimport QueryHandlerAdmin from \"./Components/Admin/QueryHandler.jsx\";\nimport QueryHandlerFaculty from \"./Components/Faculty/QueryHandler.jsx\";\nimport QueryHandlerResearchStaff from \"./Components/ResearchStaff/QueryHandler\";\nimport QueryHandlerStudent from \"./Components/Student_/QueryHandler\";\nimport DynamicForms from \"./Components/DynamicForms.jsx\";\nimport \"./_styles_/NavigationScrolling.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userCredentials: {\n        userID: \"\",\n        password: \"\",\n        userEmail: \"\",\n      },\n      tempData: {\n        // for custom inputs\n        userID: \"\",\n        courseID: \"\",\n        userType: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        phoneNum: \"\",\n        DOB: \"\",\n        street: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n      },\n      username: \" \",\n      password: \"\",\n      studentID: 0,\n      displayMsg: \"Login\",\n    };\n\n    this.displays = [\n      ,// Admin\n      /*\n      <NavBar>\n      \n        sideBarOptions={{\n          eles: [\n            \"Access Student Registration\",\n            \"Create Course\",\n            \"Create User\",\n            \"Delete Course\",\n            \"Drop Student Course\",\n            \"Modify Course\",\n            \"Modify Master Schedule\",\n            \"Modify User\",\n            \"Register Student for Course\",\n            \"View All Courses\",\n            \"View All Users\",\n            \"View Current Faculty Advisors\",\n            \"View Student Degree Audit\",\n            \"View Student Holds\",\n            \"View Student Transcript\",\n          ],\n        }}\n        userType={\"Admin\"}\n      ></NavBar>,\n      // Faculty\n      <NavBar\n        sideBarOptions={{\n          eles: [\n            \"Access Student Registration\",\n            \"Access Student Schedule\",\n            \"Access Student Transcript\",\n            \"Record Attendance\",\n            \"View Advisees\",\n            \"View Courses\",\n            \"View Exam Schedules\",\n            \"View Student Holds\",\n          ],\n        }}\n        userType={\"Faculty\"}\n      ></NavBar>,\n      // Research Staff\n      <NavBar\n        sideBarOptions={{\n          eles: [\n            \"View Course Catalog\",\n            \"View Exam Schedules\",\n            \"View Grade Data\",\n            \"View Master Schedule\",\n            \"View Registration Data\",\n            \"View Student Holds\",\n          ],\n        }}\n        userType={\"ResearchStaff\"}\n      ></NavBar>,\n      // Student\n      <NavBar\n        sideBarOptions={{\n          eles: [\n            \"Home\",\n            \"View Registration\",\n            \"Course Search\",\n            \"Register Course\",\n            \"Drop Course\",\n            \"View Holds\",\n            \"Transcript\",\n            \"Degree Audit\",\n            \"View Advisor\",\n          ],\n        }}\n        userType={\"Student\"}\n      ></NavBar>   */\n    ];\n  }\n\n  handleLogin = (user, pass, userType) => {\n    var displayMsg = \"\";\n\n    Axios.post(\"http://localhost:3305/Main/login\", {\n      args: { username: user, password: pass, userType: userType },\n      username: user,\n      password: pass,\n      userType: userType,\n    }).then((response) => {\n      console.log(response.data.validated);\n      if (response.data.validated) {\n        let userID = response.data.userID;\n        let userType = response.data.userType;\n\n        let userEmail = response.data.userEmail;\n        let userCredentials = {\n          userID: userID,\n          password: pass,\n          userEmail: userEmail,\n          userType: response.data.userType,\n        };\n        console.log(response.data.userType);\n        this.setState({ userCredentials });\n\n        switch (userType) {\n          case \"Admin\":\n            ReactDOM.render(\n              <QueryHandlerAdmin\n                userType={\"Admin\"}\n                tempData={this.state.tempData}\n                userCredentials={this.state.userCredentials}\n              ></QueryHandlerAdmin>,\n              document.getElementById(\"NavBar\")\n            );\n            break;\n          case \"Faculty\":\n            ReactDOM.render(\n              <QueryHandlerFaculty\n                userCredentials={this.state.userCredentials}\n                userType={\"Faculty\"}\n                tempData={this.state.tempData}\n                userCredentials={this.state.userCredentials}\n              ></QueryHandlerFaculty>,\n              document.getElementById(\"NavBar\")\n            );\n            console.log(\"Faculty\");\n            break;\n          case \"Research Staff\":\n            ReactDOM.render(\n              <QueryHandlerResearchStaff\n                userType={\"ResearchStaff\"}\n                tempData={this.state.tempData}\n                userCredentials={this.state.userCredentials}\n              ></QueryHandlerResearchStaff>,\n              document.getElementById(\"NavBar\")\n            );\n          case \"Student\":\n            ReactDOM.render(\n              <QueryHandlerStudent\n                userType={\"Student\"}\n                tempData={this.state.tempData}\n                userCredentials={this.state.userCredentials}\n              ></QueryHandlerStudent>,\n              document.getElementById(\"NavBar\")\n            );\n            console.log(\"Match\");\n            break;\n          default:\n            console.log(\"Nothing of import.\");\n        }\n\n        /*\n        let eles = this.displays;\n        eles.forEach((element) => {\n          console.log(element);\n          if (element.props.userType == userType) {\n            console.log(\"Rendering NavBar for type: \" + userType);\n            ReactDOM.render(\n              <div>{element}</div>,\n              document.getElementById(\"NavBar\")\n            );\n          }\n        }); */\n\n        displayMsg =\n          \"Success! Logged in as \" + this.state.userCredentials.userID;\n\n        this.setState({ displayMsg });\n\n        // whatever res.send is basically\n      } else {\n        displayMsg = \"Incorrect user/pass combo! Please try again.\";\n        this.setState({ displayMsg });\n      }\n    });\n  };\n\n  doHandleGenerateForms(forms) {\n    ReactDOM.render(<div>{forms}</div>, document.getElementById(\"NavBar\"));\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col-2\"></div>\n          <h1>{this.state.displayMsg}</h1>\n          <div className=\"col-8\">\n            <Login onLoginSubmit={this.handleLogin}></Login>\n          </div>\n        </div>\n        <div className=\"row\">\n          <DynamicForms fields={[\"studentID\"]}></DynamicForms>\n          <div id=\"widget\" className=\"col-4\"></div>\n        </div>\n\n        <div></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nclass MainPagePlaceholder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <h1>Placeholder Main Page (Pre-Login)</h1>\n        Login will redirect to appropriate landing page, these buttons won't\n        exist.\n        <a href=\"./Student\" target=\"_self\">\n          <button>Student</button>\n        </a>\n        <a href=\"./Faculty\" target=\"_self\">\n          <button>Faculty</button>\n        </a>\n        <a href=\"./Admin\" target=\"_self\">\n          <button>Admin</button>\n        </a>\n        <a href=\"./ResearchStaff\" target=\"_self\">\n          <button>Research Staff</button>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default MainPagePlaceholder;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap/css/bootstrap.css\";\nimport \"./bootstrap/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport \"./styles/bodyStyles.css\";\nimport NavBar from \"./Components/NavBar\";\nimport Display from \"./Components/Display\";\n\nimport MainPagePlaceholder from \"./Components/Main_Page_Placeholder\";\n\nReactDOM.render(\n  <div>\n    {/*    <Display /><NavBar />*/}\n    <div className=\"main\">\n      {/*\n      <MainPagePlaceholder />\n        <App />\n      */}\n      <App />\n    </div>\n  </div>,\n  document.getElementById(\"root\")\n);\n","const queries = require(\"../../queries/AdminQueries.js\");\n\nconst permissibleQueries = {\n    adminLoginInfo: queries.adminLoginInfo,\n    courseSearch: queries.courseSearch,\n    createCourse: queries.createCourse,\n    createUser: queries.createUser,\n    deleteCourse: queries.deleteCourse,\n    degreeAudit: queries.getDegreeAuditCoursesTakenP1,\n    degreeAudit2: queries.getDegreeAuditCoursesTakenP2,\n    dropCourse: queries.dropCourse,\n    facultyCoursesTeaching: queries.facultyCoursesTeaching,\n    modifyCourse: queries.modifyCourse,\n    modifyUser: queries.modifyUser,\n    registerForCourse: queries.registerForCourse,\n    studentLoginInfo: queries.studentLoginInfo,\n    studentHistory: queries.studentHistory,\n    transcript: queries.transcript,\n    updatePassword: queries.updatePassword,\n    viewAllUsers: queries.viewAllUsers,\n    viewCourseHistory: queries.viewCourseHistory,\n    viewFacultyAdvisors: queries.viewFacultyAdvisors,\n    viewHolds: queries.viewHolds,\n    viewRegistration: queries.viewRegistration,\n    viewStudentAdvisees: queries.viewStudentAdvisees,\n    viewStudentSchedule: queries.viewStudentSchedule\n};\n\nmodule.exports = permissibleQueries;"],"sourceRoot":""}